{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_signIn",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign in successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          }
        },
        "summary": "Sign in and receive a JWT token and user roles.",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/users": {
      "post": {
        "operationId": "UserController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a User",
        "tags": [
          "User"
        ]
      },
      "get": {
        "operationId": "UserController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - username",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Users",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}": {
      "patch": {
        "operationId": "UserController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "User to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a User",
        "tags": [
          "User"
        ]
      },
      "delete": {
        "operationId": "UserController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully removed"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a User",
        "tags": [
          "User"
        ]
      },
      "get": {
        "operationId": "UserController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one User",
        "tags": [
          "User"
        ]
      }
    },
    "/roles": {
      "post": {
        "operationId": "RoleController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Role",
        "tags": [
          "Role"
        ]
      },
      "get": {
        "operationId": "RoleController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n                - roleName",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Roles",
        "tags": [
          "Role"
        ]
      }
    },
    "/roles/{id}": {
      "patch": {
        "operationId": "RoleController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Role to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Role",
        "tags": [
          "Role"
        ]
      },
      "delete": {
        "operationId": "RoleController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Role successfully removed"
          },
          "404": {
            "description": "Role not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Role",
        "tags": [
          "Role"
        ]
      },
      "get": {
        "operationId": "RoleController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "description": "Role not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Role",
        "tags": [
          "Role"
        ]
      }
    },
    "/orders": {
      "post": {
        "operationId": "OrderController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Order",
        "tags": [
          "Order"
        ]
      },
      "get": {
        "operationId": "OrderController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n          - orderCategory name \n\n          - recipient \n\n          - fulfillmentDate \n\n          - createdAt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "search by recipient name or orderItems menuItem name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "description": "Filterable fields. Use format: field=value. Available filters:\n\n          - **orderCategory** (e.g., `orderCategory=5`) \n\n          - **isFrozen** (e.g., `isFrozen=true`) \n\n          - **fulfillmentType** (e.g., `fulfillmentType=pickup`)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "dateBy",
            "required": false,
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date (inclusive) in ISO format (e.g., 2025-05-01)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date (inclusive) in ISO format (e.g., 2025-05-31)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Orders",
        "tags": [
          "Order"
        ]
      }
    },
    "/orders/{id}": {
      "patch": {
        "operationId": "OrderController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Order to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Order",
        "tags": [
          "Order"
        ]
      },
      "delete": {
        "operationId": "OrderController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Order successfully removed"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Order",
        "tags": [
          "Order"
        ]
      },
      "get": {
        "operationId": "OrderController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Order",
        "tags": [
          "Order"
        ]
      }
    },
    "/order-categories": {
      "post": {
        "operationId": "OrderCategoryController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order Type successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Order Type",
        "tags": [
          "Order Category"
        ]
      },
      "get": {
        "operationId": "OrderCategoryController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - categoryName",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrderCategory"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Order Types",
        "tags": [
          "Order Category"
        ]
      }
    },
    "/order-categories/{id}": {
      "patch": {
        "operationId": "OrderCategoryController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order Type successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Order Type to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Order Type",
        "tags": [
          "Order Category"
        ]
      },
      "delete": {
        "operationId": "OrderCategoryController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Order Type successfully removed"
          },
          "404": {
            "description": "Order Type not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Order Type",
        "tags": [
          "Order Category"
        ]
      },
      "get": {
        "operationId": "OrderCategoryController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order Type found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCategory"
                }
              }
            }
          },
          "404": {
            "description": "Order Type not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Order Type",
        "tags": [
          "Order Category"
        ]
      }
    },
    "/order-menu-items": {
      "post": {
        "operationId": "OrderMenuItemController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderMenuItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order Menu Item successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderMenuItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Order Menu Item",
        "tags": [
          "Order Menu Item"
        ]
      },
      "get": {
        "operationId": "OrderMenuItemController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - menuItem name '\n\n            - quantity",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "description": "Filterable fields. Use format: field=value. Available filters:\n\n          - **order** (e.g., `order=5`)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrderMenuItem"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Order Menu Items",
        "tags": [
          "Order Menu Item"
        ]
      }
    },
    "/order-menu-items/{id}": {
      "patch": {
        "operationId": "OrderMenuItemController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderMenuItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order Menu Item successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderMenuItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Order Menu Item to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Order Menu Item",
        "tags": [
          "Order Menu Item"
        ]
      },
      "delete": {
        "operationId": "OrderMenuItemController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Order Menu Item successfully removed"
          },
          "404": {
            "description": "Order Menu Item not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Order Menu Item",
        "tags": [
          "Order Menu Item"
        ]
      },
      "get": {
        "operationId": "OrderMenuItemController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order Menu Item found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderMenuItem"
                }
              }
            }
          },
          "404": {
            "description": "Order Menu Item not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Order Menu Item",
        "tags": [
          "Order Menu Item"
        ]
      }
    },
    "/order-container-items": {
      "post": {
        "operationId": "OrderContainerItemController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderContainerItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order Menu Item Component successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderContainerItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Order Menu Item Component",
        "tags": [
          "Order Container Item"
        ]
      },
      "get": {
        "operationId": "OrderContainerItemController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n                - containedItem name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrderContainerItem"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Order Menu Item Component",
        "tags": [
          "Order Container Item"
        ]
      }
    },
    "/order-container-items/{id}": {
      "patch": {
        "operationId": "OrderContainerItemController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderContainerItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order Menu Item Component successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderContainerItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Order Menu Item Component to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Order Menu Item Component",
        "tags": [
          "Order Container Item"
        ]
      },
      "delete": {
        "operationId": "OrderContainerItemController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Order Menu Item Component successfully removed"
          },
          "404": {
            "description": "Order Menu Item Component not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Order Menu Item Component",
        "tags": [
          "Order Container Item"
        ]
      },
      "get": {
        "operationId": "OrderContainerItemController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order Menu Item Component found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderContainerItem"
                }
              }
            }
          },
          "404": {
            "description": "Order Menu Item Component not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Order Menu Item Component",
        "tags": [
          "Order Container Item"
        ]
      }
    },
    "/menu-item-categories": {
      "post": {
        "operationId": "MenuItemCategoryController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMenuItemCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Menu Item Category successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Menu Item Category",
        "tags": [
          "Menu Item Category"
        ]
      },
      "get": {
        "operationId": "MenuItemCategoryController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - categoryName",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MenuItemCategory"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Menu Item Categories",
        "tags": [
          "Menu Item Category"
        ]
      }
    },
    "/menu-item-categories/{id}": {
      "patch": {
        "operationId": "MenuItemCategoryController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMenuItemCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Menu Item Category successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Menu Item Category to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Menu Item Category",
        "tags": [
          "Menu Item Category"
        ]
      },
      "delete": {
        "operationId": "MenuItemCategoryController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Menu Item Category successfully removed"
          },
          "404": {
            "description": "Menu Item Category not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Menu Item Category",
        "tags": [
          "Menu Item Category"
        ]
      },
      "get": {
        "operationId": "MenuItemCategoryController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Menu Item Category found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemCategory"
                }
              }
            }
          },
          "404": {
            "description": "Menu Item Category not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Menu Item Category",
        "tags": [
          "Menu Item Category"
        ]
      }
    },
    "/menu-item-sizes": {
      "post": {
        "operationId": "MenuItemSizeController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMenuItemSizeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Menu Item Size successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemSize"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Menu Item Size",
        "tags": [
          "Menu Item Size"
        ]
      },
      "get": {
        "operationId": "MenuItemSizeController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MenuItemSize"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Menu Item Sizes",
        "tags": [
          "Menu Item Size"
        ]
      }
    },
    "/menu-item-sizes/{id}": {
      "patch": {
        "operationId": "MenuItemSizeController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMenuItemSizeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Menu Item Size successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemSize"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Menu Item Size to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Menu Item Size",
        "tags": [
          "Menu Item Size"
        ]
      },
      "delete": {
        "operationId": "MenuItemSizeController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Menu Item Size successfully removed"
          },
          "404": {
            "description": "Menu Item Size not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Menu Item Size",
        "tags": [
          "Menu Item Size"
        ]
      },
      "get": {
        "operationId": "MenuItemSizeController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Menu Item Size found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemSize"
                }
              }
            }
          },
          "404": {
            "description": "Menu Item Size not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Menu Item Size",
        "tags": [
          "Menu Item Size"
        ]
      }
    },
    "/menu-items": {
      "post": {
        "operationId": "MenuItemController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMenuItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Menu Item successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Menu Item",
        "tags": [
          "Menu Item"
        ]
      },
      "get": {
        "operationId": "MenuItemController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n          - itemName'\n\n          - category (by name)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "search by MenuItem name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "description": "Filterable fields. Use format: field=value. Available filters:\n\n          - **category** (e.g., `category=5`)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MenuItem"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Menu Items",
        "tags": [
          "Menu Item"
        ]
      }
    },
    "/menu-items/{id}": {
      "patch": {
        "operationId": "MenuItemController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMenuItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Menu Item successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Menu Item to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Menu Item",
        "tags": [
          "Menu Item"
        ]
      },
      "delete": {
        "operationId": "MenuItemController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Menu Item successfully removed"
          },
          "404": {
            "description": "Menu Item not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Menu Item",
        "tags": [
          "Menu Item"
        ]
      },
      "get": {
        "operationId": "MenuItemController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Menu Item found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItem"
                }
              }
            }
          },
          "404": {
            "description": "Menu Item not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Menu Item",
        "tags": [
          "Menu Item"
        ]
      }
    },
    "/menu-item-container-items": {
      "post": {
        "operationId": "MenuItemContainerItemController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMenuItemContainerItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Menu Item Component successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemContainerItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Menu Item Component",
        "tags": [
          "Menu Item Container Item"
        ]
      },
      "get": {
        "operationId": "MenuItemContainerItemController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - containedItem name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MenuItemContainerItem"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Menu Item Components",
        "tags": [
          "Menu Item Container Item"
        ]
      }
    },
    "/menu-item-container-items/{id}": {
      "patch": {
        "operationId": "MenuItemContainerItemController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMenuItemContainerItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Menu Item Component successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemContainerItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Menu Item Component to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Menu Item Component",
        "tags": [
          "Menu Item Container Item"
        ]
      },
      "delete": {
        "operationId": "MenuItemContainerItemController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Menu Item Component successfully removed"
          },
          "404": {
            "description": "Menu Item Component not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Menu Item Component",
        "tags": [
          "Menu Item Container Item"
        ]
      },
      "get": {
        "operationId": "MenuItemContainerItemController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Menu Item Component found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemContainerItem"
                }
              }
            }
          },
          "404": {
            "description": "Menu Item Component not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Menu Item Component",
        "tags": [
          "Menu Item Container Item"
        ]
      }
    },
    "/menu-item-container-options": {
      "post": {
        "operationId": "MenuItemContainerOptionsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMenuItemContainerOptionsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Menu Item Component Options created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemContainerOptions"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates Menu Item Component Options",
        "tags": [
          "Menu Item Container Options"
        ]
      },
      "get": {
        "operationId": "MenuItemContainerOptionsController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MenuItemContainerOptions"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Menu Item Component Options",
        "tags": [
          "Menu Item Container Options"
        ]
      }
    },
    "/menu-item-container-options/{id}": {
      "patch": {
        "operationId": "MenuItemContainerOptionsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMenuItemContainerOptionsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Menu Item Component Options successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemContainerOptions"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Menu Item Component Options to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates Menu Item Component Options",
        "tags": [
          "Menu Item Container Options"
        ]
      },
      "delete": {
        "operationId": "MenuItemContainerOptionsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Menu Item Component Options successfully removed"
          },
          "404": {
            "description": "Menu Item Component Options not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes Menu Item Component Options",
        "tags": [
          "Menu Item Container Options"
        ]
      },
      "get": {
        "operationId": "MenuItemContainerOptionsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Menu Item Component Options found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemContainerOptions"
                }
              }
            }
          },
          "404": {
            "description": "Menu Item Component Options not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves Menu Item Component Options",
        "tags": [
          "Menu Item Container Options"
        ]
      }
    },
    "/menu-item-container-rules": {
      "post": {
        "operationId": "MenuItemContainerRuleController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMenuItemContainerRuleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Component Option successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemContainerRule"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Menu item container component option (1 rule of the container options determing a valid menuItem and its allowed sizes)",
        "tags": [
          "Menu Item Container Rules"
        ]
      },
      "get": {
        "operationId": "MenuItemContainerRuleController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n                -validItem name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MenuItemContainerRule"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Component Option",
        "tags": [
          "Menu Item Container Rules"
        ]
      }
    },
    "/menu-item-container-rules/{id}": {
      "patch": {
        "operationId": "MenuItemContainerRuleController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMenuItemContainerRuleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Component Option successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemContainerRule"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Menu Item Size to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Component Option",
        "tags": [
          "Menu Item Container Rules"
        ]
      },
      "delete": {
        "operationId": "MenuItemContainerRuleController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Component Option successfully removed"
          },
          "404": {
            "description": "Component Option not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Component Option",
        "tags": [
          "Menu Item Container Rules"
        ]
      },
      "get": {
        "operationId": "MenuItemContainerRuleController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Component Option found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemContainerRule"
                }
              }
            }
          },
          "404": {
            "description": "Component Option not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Component Option",
        "tags": [
          "Menu Item Container Rules"
        ]
      }
    },
    "/templates": {
      "post": {
        "operationId": "TemplateController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Template",
        "tags": [
          "Template"
        ]
      },
      "get": {
        "operationId": "TemplateController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - templateName",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Template"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Templates",
        "tags": [
          "Template"
        ]
      }
    },
    "/templates/{id}": {
      "patch": {
        "operationId": "TemplateController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Template to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Template",
        "tags": [
          "Template"
        ]
      },
      "delete": {
        "operationId": "TemplateController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Template successfully removed"
          },
          "404": {
            "description": "Template not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Template",
        "tags": [
          "Template"
        ]
      },
      "get": {
        "operationId": "TemplateController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "404": {
            "description": "Template not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Template",
        "tags": [
          "Template"
        ]
      }
    },
    "/template-menu-items": {
      "post": {
        "operationId": "TemplateMenuItemController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateMenuItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template Menu Item successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateMenuItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Template Menu Item",
        "tags": [
          "Template Menu Item"
        ]
      },
      "get": {
        "operationId": "TemplateMenuItemController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - tablePosIndex",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "description": "Filterable fields. Use format: field=value. Available filters:\n\n          - **parentTemplate** (e.g., `parentTemplate=5`)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TemplateMenuItem"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Template Menu Items",
        "tags": [
          "Template Menu Item"
        ]
      }
    },
    "/template-menu-items/{id}": {
      "patch": {
        "operationId": "TemplateMenuItemController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTemplateMenuItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template Menu Item successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateMenuItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Template Menu Item to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Template Menu Item",
        "tags": [
          "Template Menu Item"
        ]
      },
      "delete": {
        "operationId": "TemplateMenuItemController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Template Menu Item successfully removed"
          },
          "404": {
            "description": "Template Menu Item not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Template Menu Item",
        "tags": [
          "Template Menu Item"
        ]
      },
      "get": {
        "operationId": "TemplateMenuItemController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template Menu Item found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateMenuItem"
                }
              }
            }
          },
          "404": {
            "description": "Template Menu Item not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Template Menu Item",
        "tags": [
          "Template Menu Item"
        ]
      }
    },
    "/labels": {
      "post": {
        "operationId": "LabelController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLabelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Label successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Label",
        "tags": [
          "Label"
        ]
      },
      "get": {
        "operationId": "LabelController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n         - labelType (by name)\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "search by MenuItem name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "description": "Filterable fields. Use format: field=value. Available filters:\n\n              - ** labelType ** (e.g., `labelType=5`)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Labels",
        "tags": [
          "Label"
        ]
      }
    },
    "/labels/{id}": {
      "patch": {
        "operationId": "LabelController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLabelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Label to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Label",
        "tags": [
          "Label"
        ]
      },
      "delete": {
        "operationId": "LabelController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Label successfully removed"
          },
          "404": {
            "description": "Label not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Label",
        "tags": [
          "Label"
        ]
      },
      "get": {
        "operationId": "LabelController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Label found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "404": {
            "description": "Label not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Label",
        "tags": [
          "Label"
        ]
      }
    },
    "/label-types": {
      "post": {
        "operationId": "LabelTypeController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLabelTypeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Label Type successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabelType"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Label Type",
        "tags": [
          "Label Type"
        ]
      },
      "get": {
        "operationId": "LabelTypeController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n        - labelTypeName",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LabelType"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Label Types",
        "tags": [
          "Label Type"
        ]
      }
    },
    "/label-types/{id}": {
      "patch": {
        "operationId": "LabelTypeController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLabelTypeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label Type successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabelType"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Label Type to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Label Type",
        "tags": [
          "Label Type"
        ]
      },
      "delete": {
        "operationId": "LabelTypeController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Label Type successfully removed"
          },
          "404": {
            "description": "Label Type not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Label Type",
        "tags": [
          "Label Type"
        ]
      },
      "get": {
        "operationId": "LabelTypeController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Label Type found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabelType"
                }
              }
            }
          },
          "404": {
            "description": "Label Type not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Label Type",
        "tags": [
          "Label Type"
        ]
      }
    },
    "/inventory-areas": {
      "post": {
        "operationId": "InventoryAreaController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryAreaDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory Area successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryArea"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Inventory Area",
        "tags": [
          "Inventory Area"
        ]
      },
      "get": {
        "operationId": "InventoryAreaController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n          - areaName",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InventoryArea"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Inventory Areas",
        "tags": [
          "Inventory Area"
        ]
      }
    },
    "/inventory-areas/{id}": {
      "patch": {
        "operationId": "InventoryAreaController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryAreaDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory Area successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryArea"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Inventory Area to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Inventory Area",
        "tags": [
          "Inventory Area"
        ]
      },
      "delete": {
        "operationId": "InventoryAreaController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Inventory Area successfully removed"
          },
          "404": {
            "description": "Inventory Area not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Inventory Area",
        "tags": [
          "Inventory Area"
        ]
      },
      "get": {
        "operationId": "InventoryAreaController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory Area found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryArea"
                }
              }
            }
          },
          "404": {
            "description": "Inventory Area not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Inventory Area",
        "tags": [
          "Inventory Area"
        ]
      }
    },
    "/inventory-area-counts": {
      "post": {
        "operationId": "InventoryAreaCountController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryAreaCountDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory Area Count successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAreaCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: ValidationException or DatabaseException"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates an Inventory Area Count",
        "tags": [
          "Inventory Area Count"
        ]
      },
      "get": {
        "operationId": "InventoryAreaCountController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - countDate\n\n            - inventoryArea (by name)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "search by InventoryItem name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "description": "Filterable fields. Use format: filters=field,value. Available filters:\n\n      - **inventoryArea** (e.g., `filters=inventoryArea,5`)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "dateBy",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date (inclusive) in ISO format (e.g., 2025-05-01)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date (inclusive) in ISO format (e.g., 2025-05-31)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InventoryAreaCount"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Inventory Area Count",
        "tags": [
          "Inventory Area Count"
        ]
      }
    },
    "/inventory-area-counts/{id}": {
      "patch": {
        "operationId": "InventoryAreaCountController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryAreaCountDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory Area Count successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAreaCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: ValidationException or DatabaseException"
          },
          "404": {
            "description": "Inventory Area Count to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Inventory Area Count",
        "tags": [
          "Inventory Area Count"
        ]
      },
      "delete": {
        "operationId": "InventoryAreaCountController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Inventory Area Count successfully removed"
          },
          "404": {
            "description": "Inventory Area Count not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Inventory Area Count",
        "tags": [
          "Inventory Area Count"
        ]
      },
      "get": {
        "operationId": "InventoryAreaCountController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory Area Count found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAreaCount"
                }
              }
            }
          },
          "404": {
            "description": "Inventory Area Count not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Inventory Area Count",
        "tags": [
          "Inventory Area Count"
        ]
      }
    },
    "/inventory-area-items": {
      "post": {
        "operationId": "InventoryAreaItemController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryAreaItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory Area Item successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAreaItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: ValidationException or DatabaseException"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Inventory Area Item",
        "tags": [
          "Inventory Area Item"
        ]
      },
      "get": {
        "operationId": "InventoryAreaItemController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n      - countedItem \n\n      - amount",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "search by InventoryItem name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "description": "Filterable fields. Use format: field=value. Available filters:\n\n          - **parentInventoryCount** (e.g., `parentInventoryCount=5`)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InventoryAreaItem"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Inventory Area Items",
        "tags": [
          "Inventory Area Item"
        ]
      }
    },
    "/inventory-area-items/{id}": {
      "patch": {
        "operationId": "InventoryAreaItemController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryAreaItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory Area Item successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAreaItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: ValidationException or DatabaseException"
          },
          "404": {
            "description": "Inventory Area Item to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Inventory Area Item",
        "tags": [
          "Inventory Area Item"
        ]
      },
      "delete": {
        "operationId": "InventoryAreaItemController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Inventory Area Item successfully removed"
          },
          "404": {
            "description": "Inventory Area Item not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Inventory Area Item",
        "tags": [
          "Inventory Area Item"
        ]
      },
      "get": {
        "operationId": "InventoryAreaItemController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory Area Item found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAreaItem"
                }
              }
            }
          },
          "404": {
            "description": "Inventory Area Item not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Inventory Area Item",
        "tags": [
          "Inventory Area Item"
        ]
      }
    },
    "/inventory-items": {
      "post": {
        "operationId": "InventoryItemController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory Item successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Inventory Item",
        "tags": [
          "Inventory Item"
        ]
      },
      "get": {
        "operationId": "InventoryItemController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n          - itemName \n\n          - vendor (by name, nulls sorted last)\n\n          - category (by name, nulls sorted last)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "search by inventory item name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "description": "Filterable fields. Use format: field=value. Available filters:\n\n          - ** category ** (e.g., `category=5`)\n\n          - ** vendor ** (e.g., `vendor=5`)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InventoryItem"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Inventory Items",
        "tags": [
          "Inventory Item"
        ]
      }
    },
    "/inventory-items/{id}": {
      "patch": {
        "operationId": "InventoryItemController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory Item successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Inventory Item to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Inventory Item",
        "tags": [
          "Inventory Item"
        ]
      },
      "delete": {
        "operationId": "InventoryItemController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Inventory Item successfully removed"
          },
          "404": {
            "description": "Inventory Item not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Inventory Item",
        "tags": [
          "Inventory Item"
        ]
      },
      "get": {
        "operationId": "InventoryItemController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory Item found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItem"
                }
              }
            }
          },
          "404": {
            "description": "Inventory Item not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Inventory Item",
        "tags": [
          "Inventory Item"
        ]
      }
    },
    "/inventory-item-categories": {
      "post": {
        "operationId": "InventoryItemCategoryController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryItemCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory Item Category successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Inventory Item Category",
        "tags": [
          "Inventory Item Category"
        ]
      },
      "get": {
        "operationId": "InventoryItemCategoryController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n              - categoryName",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InventoryItemCategory"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Inventory Item Categories",
        "tags": [
          "Inventory Item Category"
        ]
      }
    },
    "/inventory-item-categories/{id}": {
      "patch": {
        "operationId": "InventoryItemCategoryController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryItemCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory Item Category successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Inventory Item Category to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Inventory Item Category",
        "tags": [
          "Inventory Item Category"
        ]
      },
      "delete": {
        "operationId": "InventoryItemCategoryController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Inventory Item Category successfully removed"
          },
          "404": {
            "description": "Inventory Item Category not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Inventory Item Category",
        "tags": [
          "Inventory Item Category"
        ]
      },
      "get": {
        "operationId": "InventoryItemCategoryController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory Item Category found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemCategory"
                }
              }
            }
          },
          "404": {
            "description": "Inventory Item Category not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Inventory Item Category",
        "tags": [
          "Inventory Item Category"
        ]
      }
    },
    "/inventory-item-packages": {
      "post": {
        "operationId": "InventoryItemPackageController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryItemPackageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory Item Package successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemPackage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Inventory Item Package",
        "tags": [
          "Inventory Item Package"
        ]
      },
      "get": {
        "operationId": "InventoryItemPackageController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - packageName",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InventoryItemPackage"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Inventory Item Packages",
        "tags": [
          "Inventory Item Package"
        ]
      }
    },
    "/inventory-item-packages/{id}": {
      "patch": {
        "operationId": "InventoryItemPackageController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryItemPackageDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory Item Package successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemPackage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Inventory Item Package to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Inventory Item Package",
        "tags": [
          "Inventory Item Package"
        ]
      },
      "delete": {
        "operationId": "InventoryItemPackageController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Inventory Item Package successfully removed"
          },
          "404": {
            "description": "Inventory Item Package not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Inventory Item Package",
        "tags": [
          "Inventory Item Package"
        ]
      },
      "get": {
        "operationId": "InventoryItemPackageController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory Item Package found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemPackage"
                }
              }
            }
          },
          "404": {
            "description": "Inventory Item Package not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Inventory Item Package",
        "tags": [
          "Inventory Item Package"
        ]
      }
    },
    "/inventory-item-sizes": {
      "post": {
        "operationId": "InventoryItemSizeController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryItemSizeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory Item Size successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemSize"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Inventory Item Size",
        "tags": [
          "Inventory Item Size"
        ]
      },
      "get": {
        "operationId": "InventoryItemSizeController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - cost",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InventoryItemSize"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Inventory Item Sizes",
        "tags": [
          "Inventory Item Size"
        ]
      }
    },
    "/inventory-item-sizes/{id}": {
      "patch": {
        "operationId": "InventoryItemSizeController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMenuItemSizeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory Item Size successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemSize"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Inventory Item Size to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Inventory Item Size",
        "tags": [
          "Inventory Item Size"
        ]
      },
      "delete": {
        "operationId": "InventoryItemSizeController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Inventory Item Size successfully removed"
          },
          "404": {
            "description": "Inventory Item Size not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Inventory Item Size",
        "tags": [
          "Inventory Item Size"
        ]
      },
      "get": {
        "operationId": "InventoryItemSizeController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory Item Size found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemSize"
                }
              }
            }
          },
          "404": {
            "description": "Inventory Item Size not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Inventory Item Size",
        "tags": [
          "Inventory Item Size"
        ]
      }
    },
    "/inventory-item-vendors": {
      "post": {
        "operationId": "InventoryItemVendorController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryItemVendorDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory Item Vendor successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemVendor"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Inventory Item Vendor",
        "tags": [
          "Inventory Item Vendor"
        ]
      },
      "get": {
        "operationId": "InventoryItemVendorController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - vendorName",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InventoryItemVendor"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Inventory Item Vendors",
        "tags": [
          "Inventory Item Vendor"
        ]
      }
    },
    "/inventory-item-vendors/{id}": {
      "patch": {
        "operationId": "InventoryItemVendorController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryItemVendorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory Item Vendor successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemVendor"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Inventory Item Vendor to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Inventory Item Vendor",
        "tags": [
          "Inventory Item Vendor"
        ]
      },
      "delete": {
        "operationId": "InventoryItemVendorController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Inventory Item Vendor successfully removed"
          },
          "404": {
            "description": "Inventory Item Vendor not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Inventory Item Vendor",
        "tags": [
          "Inventory Item Vendor"
        ]
      },
      "get": {
        "operationId": "InventoryItemVendorController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory Item Vendor found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemVendor"
                }
              }
            }
          },
          "404": {
            "description": "Inventory Item Vendor not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Inventory Item Vendor",
        "tags": [
          "Inventory Item Vendor"
        ]
      }
    },
    "/units-of-measure": {
      "post": {
        "operationId": "UnitOfMeasureController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUnitOfMeasureDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Unit of Measure successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitOfMeasure"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Unit of Measure",
        "tags": [
          "Unit of Measure"
        ]
      },
      "get": {
        "operationId": "UnitOfMeasureController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - name\n\n            - category (by name, nulls last)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "description": "Filterable fields. Use format: field=value. Available filters:\n\n          - **category** (e.g., `category=5`)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UnitOfMeasure"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Units of Measure",
        "tags": [
          "Unit of Measure"
        ]
      }
    },
    "/units-of-measure/{id}": {
      "patch": {
        "operationId": "UnitOfMeasureController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUnitOfMeasureDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unit of Measure successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitOfMeasure"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Unit of Measure to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Unit of Measure",
        "tags": [
          "Unit of Measure"
        ]
      },
      "delete": {
        "operationId": "UnitOfMeasureController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Unit of Measure successfully removed"
          },
          "404": {
            "description": "Unit of Measure not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Unit of Measure",
        "tags": [
          "Unit of Measure"
        ]
      },
      "get": {
        "operationId": "UnitOfMeasureController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unit of Measure found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitOfMeasure"
                }
              }
            }
          },
          "404": {
            "description": "Unit of Measure not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Unit of Measure",
        "tags": [
          "Unit of Measure"
        ]
      }
    },
    "/unit-of-measure-categories": {
      "post": {
        "operationId": "UnitOfMeasureCategoryController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUnitOfMeasureCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Unit Category successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitOfMeasureCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Unit Category",
        "tags": [
          "Unit of Measure Category"
        ]
      },
      "get": {
        "operationId": "UnitOfMeasureCategoryController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - categoryName",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UnitOfMeasureCategory"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Unit Categories",
        "tags": [
          "Unit of Measure Category"
        ]
      }
    },
    "/unit-of-measure-categories/{id}": {
      "patch": {
        "operationId": "UnitOfMeasureCategoryController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUnitOfMeasureCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unit Category successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitOfMeasureCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Unit Category to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Unit Category",
        "tags": [
          "Unit of Measure Category"
        ]
      },
      "delete": {
        "operationId": "UnitOfMeasureCategoryController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Unit Category successfully removed"
          },
          "404": {
            "description": "Unit Category not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Unit Category",
        "tags": [
          "Unit of Measure Category"
        ]
      },
      "get": {
        "operationId": "UnitOfMeasureCategoryController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unit Category found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitOfMeasureCategory"
                }
              }
            }
          },
          "404": {
            "description": "Unit Category not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Unit Category",
        "tags": [
          "Unit of Measure Category"
        ]
      }
    },
    "/recipes": {
      "post": {
        "operationId": "RecipeController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecipeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recipe successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Recipe"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Recipe",
        "tags": [
          "Recipe"
        ]
      },
      "get": {
        "operationId": "RecipeController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n          - recipeName\n\n          - category name (nulls last)\n\n          - subCategory name (nulls last)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "search by Recipe name, and RecipeIngredient name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "description": "Filterable fields. Use format: field=value. Available filters:\n\n          - **category** (e.g., `category=5`)\n\n          - **subCategory**",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Recipe"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Recipes",
        "tags": [
          "Recipe"
        ]
      }
    },
    "/recipes/{id}": {
      "patch": {
        "operationId": "RecipeController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRecipeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recipe successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Recipe"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Recipe to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Recipe",
        "tags": [
          "Recipe"
        ]
      },
      "delete": {
        "operationId": "RecipeController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Recipe successfully removed"
          },
          "404": {
            "description": "Recipe not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Recipe",
        "tags": [
          "Recipe"
        ]
      },
      "get": {
        "operationId": "RecipeController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Recipe"
                }
              }
            }
          },
          "404": {
            "description": "Recipe not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Recipe",
        "tags": [
          "Recipe"
        ]
      }
    },
    "/recipe-categories": {
      "post": {
        "operationId": "RecipeCategoryController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecipeCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recipe Category successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Recipe Category",
        "tags": [
          "Recipe Category"
        ]
      },
      "get": {
        "operationId": "RecipeCategoryController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - categoryName",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RecipeCategory"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Recipe Categories",
        "tags": [
          "Recipe Category"
        ]
      }
    },
    "/recipe-categories/{id}": {
      "patch": {
        "operationId": "RecipeCategoryController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRecipeCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recipe Category successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Recipe Category to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Recipe Category",
        "tags": [
          "Recipe Category"
        ]
      },
      "delete": {
        "operationId": "RecipeCategoryController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Recipe Category successfully removed"
          },
          "404": {
            "description": "Recipe Category not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Recipe Category",
        "tags": [
          "Recipe Category"
        ]
      },
      "get": {
        "operationId": "RecipeCategoryController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe Category found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeCategory"
                }
              }
            }
          },
          "404": {
            "description": "Recipe Category not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Recipe Category",
        "tags": [
          "Recipe Category"
        ]
      }
    },
    "/recipe-sub-categories": {
      "post": {
        "operationId": "RecipeSubCategoryController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecipeSubCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recipe Sub Category successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeSubCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Recipe Sub Category",
        "tags": [
          "Recipe Sub Category"
        ]
      },
      "get": {
        "operationId": "RecipeSubCategoryController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - subCategoryName \n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RecipeSubCategory"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Recipe Sub Categories",
        "tags": [
          "Recipe Sub Category"
        ]
      }
    },
    "/recipe-sub-categories/{id}": {
      "patch": {
        "operationId": "RecipeSubCategoryController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRecipeSubCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recipe Sub Category successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeSubCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Recipe Sub Category to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Recipe Sub Category",
        "tags": [
          "Recipe Sub Category"
        ]
      },
      "delete": {
        "operationId": "RecipeSubCategoryController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Recipe Sub Category successfully removed"
          },
          "404": {
            "description": "Recipe Sub Category not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Recipe Sub Category",
        "tags": [
          "Recipe Sub Category"
        ]
      },
      "get": {
        "operationId": "RecipeSubCategoryController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe Sub Category found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeSubCategory"
                }
              }
            }
          },
          "404": {
            "description": "Recipe Sub Category not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Recipe Sub Category",
        "tags": [
          "Recipe Sub Category"
        ]
      }
    },
    "/recipe-ingredients": {
      "post": {
        "operationId": "RecipeIngredientController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecipeIngredientDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recipe Ingredient successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeIngredient"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Creates a Recipe Ingredient",
        "tags": [
          "Recipe Ingredient"
        ]
      },
      "get": {
        "operationId": "RecipeIngredientController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by. Available options:\n\n            - ingredient (by name)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: ASC or DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "relations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RecipeIngredient"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "example": "2"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves an array of Recipe Ingredients",
        "tags": [
          "Recipe Ingredient"
        ]
      }
    },
    "/recipe-ingredients/{id}": {
      "patch": {
        "operationId": "RecipeIngredientController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRecipeIngredientDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recipe Ingredient successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeIngredient"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Recipe Ingredient to update not found."
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Updates a Recipe Ingredient",
        "tags": [
          "Recipe Ingredient"
        ]
      },
      "delete": {
        "operationId": "RecipeIngredientController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Recipe Ingredient successfully removed"
          },
          "404": {
            "description": "Recipe Ingredient not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Removes a Recipe Ingredient",
        "tags": [
          "Recipe Ingredient"
        ]
      },
      "get": {
        "operationId": "RecipeIngredientController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe Ingredient found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeIngredient"
                }
              }
            }
          },
          "404": {
            "description": "Recipe Ingredient not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Retrieves one Recipe Ingredient",
        "tags": [
          "Recipe Ingredient"
        ]
      }
    }
  },
  "info": {
    "title": "PetsiBackend",
    "description": "Petsi CRUD API documentation",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "SignInDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "johndoe"
          },
          "password": {
            "type": "string",
            "example": "password123"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "AuthResponseDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "roles": {
            "description": "for frontend rendering, not for any authentication reasons",
            "example": [
              "admin",
              "staff"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "access_token",
          "roles"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the user"
          },
          "username": {
            "type": "string",
            "example": "johndoe",
            "description": "Username of the user"
          },
          "email": {
            "type": "string",
            "example": "john@example.com",
            "description": "Email address",
            "format": "email",
            "nullable": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-06-05T23:00:17.814Z",
            "description": "date the user was created"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-06-05T23:00:17.814Z",
            "description": "date the user was most recently updated"
          },
          "roles": {
            "example": [
              {
                "id": 1,
                "roleName": "staff",
                "users": [
                  {}
                ]
              }
            ],
            "description": "list of roles the user possess to determine feature access",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          }
        },
        "required": [
          "id",
          "username",
          "createdAt",
          "updatedAt",
          "roles"
        ]
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "roleName": {
            "type": "string",
            "example": "Staff",
            "description": "Name of the role"
          },
          "users": {
            "example": [
              {
                "id": 1,
                "userName": "jim",
                "email": "jim@email.com",
                "roles": [
                  {}
                ]
              }
            ],
            "description": "List of users who possess this role",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "required": [
          "id",
          "roleName",
          "users"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "",
            "example": "jsmith123"
          },
          "email": {
            "type": "string",
            "description": "",
            "example": "jjsmithy@email.com",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "",
            "example": "strongPassword1234"
          },
          "roleIds": {
            "description": "Id of roles the user has.",
            "example": [
              1,
              2
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "",
            "example": "jsmith123"
          },
          "email": {
            "type": "string",
            "description": "",
            "example": "jjsmithy@email.com",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "",
            "example": "strongPassword1234"
          },
          "roleIds": {
            "description": "Id of roles the user has.",
            "example": [
              1,
              2
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateRoleDto": {
        "type": "object",
        "properties": {
          "roleName": {
            "type": "string",
            "description": "Name of the Role entity.",
            "example": "staff"
          }
        },
        "required": [
          "roleName"
        ]
      },
      "UpdateRoleDto": {
        "type": "object",
        "properties": {
          "roleName": {
            "type": "string",
            "description": "Name of the Role entity.",
            "example": "manager"
          }
        }
      },
      "MenuItemCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "categoryName": {
            "type": "string",
            "example": "Pastry",
            "description": "Name of the category"
          },
          "categoryItems": {
            "example": [
              {
                "id": 1,
                "itemname": "Classic Apple",
                "category": {},
                "validSizes": [
                  {
                    "id": 1,
                    "name": "medium"
                  }
                ],
                "definedContainerItems": [
                  {}
                ],
                "containerOptions": {}
              }
            ],
            "description": "MenuItems that are under the category instance",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuItem"
            }
          }
        },
        "required": [
          "id",
          "categoryName",
          "categoryItems"
        ]
      },
      "MenuItemSize": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "name": {
            "type": "string",
            "example": "medium",
            "description": "The naming identifier of the size."
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "MenuItemContainerItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "parentContainer": {
            "example": {
              "id": 1,
              "itemname": "Classic Apple",
              "category": {},
              "validSizes": [
                {
                  "id": 1,
                  "name": "medium"
                }
              ],
              "definedContainerItems": [
                {}
              ],
              "containerOptions": {}
            },
            "description": "The MenuItem that is the container to this item",
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItem"
              }
            ]
          },
          "parentContainerSize": {
            "example": {
              "id": 1,
              "name": "medium"
            },
            "description": "The size of the container to this item",
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItemSize"
              }
            ]
          },
          "containedItem": {
            "example": {
              "id": 1,
              "itemname": "Classic Apple",
              "category": {},
              "validSizes": [
                {
                  "id": 1,
                  "name": "medium"
                }
              ],
              "definedContainerItems": [
                {}
              ],
              "containerOptions": {}
            },
            "description": "The menuItem that is being referenced as the contained item",
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItem"
              }
            ]
          },
          "containedItemsize": {
            "example": {
              "id": 1,
              "name": "medium"
            },
            "description": "The size of the MenuItem that is being contained",
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItemSize"
              }
            ]
          },
          "quantity": {
            "type": "number",
            "example": {},
            "description": "The amount of the contained MenuItem."
          }
        },
        "required": [
          "id",
          "parentContainer",
          "parentContainerSize",
          "containedItem",
          "containedItemsize",
          "quantity"
        ]
      },
      "MenuItemContainerRule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity."
          },
          "parentContainerOption": {
            "example": {
              "id": 1,
              "parentContainer": {},
              "containerRules": [
                {}
              ],
              "validQuantity": 1
            },
            "description": "The container options this rule applies to.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItemContainerOptions"
              }
            ]
          },
          "validItem": {
            "example": {
              "id": 1,
              "itemname": "Classic Apple",
              "category": {},
              "validSizes": [
                {
                  "id": 1,
                  "name": "medium"
                }
              ],
              "definedContainerItems": [
                {}
              ],
              "containerOptions": {}
            },
            "description": "The MenuItem this rule states is valid in the container.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItem"
              }
            ]
          },
          "validSizes": {
            "example": [
              {
                "id": 1,
                "name": "medium"
              }
            ],
            "description": "The sizes of the validItem that is allowed in the container.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuItemSize"
            }
          }
        },
        "required": [
          "id",
          "parentContainerOption",
          "validItem",
          "validSizes"
        ]
      },
      "MenuItemContainerOptions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "parentContainer": {
            "example": {
              "id": 1,
              "itemname": "Classic Apple",
              "category": {},
              "validSizes": [
                {
                  "id": 1,
                  "name": "medium"
                }
              ],
              "definedContainerItems": [
                {}
              ],
              "containerOptions": {}
            },
            "description": "The MenuItem these options apply to.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItem"
              }
            ]
          },
          "containerRules": {
            "example": [
              {
                "id": 1,
                "parentContainerOption": {},
                "validItem": {
                  "id": 1,
                  "itemname": "Classic Apple",
                  "category": {},
                  "validSizes": [
                    {
                      "id": 1,
                      "name": "medium"
                    }
                  ],
                  "definedContainerItems": [
                    {}
                  ],
                  "containerOptions": {}
                },
                "validSizes": [
                  {
                    "id": 1,
                    "name": "medium"
                  }
                ]
              }
            ],
            "description": "The rules describing what items are allowed in the container and what sizes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuItemContainerRule"
            }
          },
          "validQuantity": {
            "type": "number",
            "example": "6",
            "description": "The total size of the container that the child items must total."
          }
        },
        "required": [
          "id",
          "parentContainer",
          "containerRules",
          "validQuantity"
        ]
      },
      "MenuItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "category": {
            "example": {
              "id": 1,
              "categoryName": "pie",
              "categoryItems": [
                {}
              ]
            },
            "description": "The category assigned to the item",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItemCategory"
              }
            ]
          },
          "itemName": {
            "type": "string",
            "example": "Class Apple Pie",
            "description": "Name of the item"
          },
          "veganOption": {
            "example": {},
            "description": "The vegan counterpart to the item.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItem"
              }
            ]
          },
          "takeNBakeOption": {
            "example": {},
            "description": "The take n bake counterpart to the time",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItem"
              }
            ]
          },
          "veganTakeNBakeOption": {
            "example": {},
            "description": "The vegan take n bake option for the item",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItem"
              }
            ]
          },
          "validSizes": {
            "example": [
              {
                "id": 1,
                "name": "medium"
              }
            ],
            "description": "The sizes the item is available in",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuItemSize"
            }
          },
          "isPOTM": {
            "type": "boolean",
            "example": false,
            "description": "A flag for items that are \"Pie of the Month\" specials"
          },
          "isParbake": {
            "type": "boolean",
            "example": true,
            "description": "A flag for items that require par shells in its baking process"
          },
          "definedContainerItems": {
            "example": [
              {
                "id": 1,
                "parentContainer": {},
                "parentContainerSize": {},
                "containedItem": {
                  "id": 1,
                  "itemname": "Classic Apple",
                  "category": {},
                  "validSizes": [
                    {
                      "id": 1,
                      "name": "medium"
                    }
                  ],
                  "definedContainerItems": [
                    {}
                  ],
                  "containerOptions": {}
                },
                "containedItemSize": {
                  "id": 1,
                  "name": "medium"
                },
                "quantity": 1
              }
            ],
            "description": "When the item is a container for other MenuItems, and the contained is a fixed set of items per container size.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuItemContainerItem"
            }
          },
          "containerOptions": {
            "example": {
              "id": 1,
              "parentContainer": {},
              "containerRules": [
                {
                  "id": 1,
                  "parentContainerOption": {},
                  "validItem": {
                    "id": 1,
                    "itemname": "Classic Apple",
                    "category": {},
                    "validSizes": [
                      {
                        "id": 1,
                        "name": "medium"
                      }
                    ],
                    "definedContainerItems": [
                      {}
                    ],
                    "containerOptions": {}
                  },
                  "validSizes": [
                    {
                      "id": 1,
                      "name": "medium"
                    }
                  ]
                }
              ],
              "validQuantity": 1
            },
            "description": "When the item is a container for other MenuItems, and the contained items can vary between a set of items and their sizes, totaling a declared size.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItemContainerOptions"
              }
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-06-06T19:22:07.102Z",
            "description": "Date the item was created"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-06-06T19:22:07.102Z",
            "description": "Date the item was last modified"
          }
        },
        "required": [
          "id",
          "itemName",
          "validSizes",
          "isPOTM",
          "isParbake",
          "definedContainerItems",
          "createdAt",
          "updatedAt"
        ]
      },
      "OrderContainerItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "parentOrderItem": {
            "example": {
              "id": 1,
              "order": {},
              "menuItem": {
                "id": 1,
                "itemname": "Classic Apple",
                "category": {},
                "validSizes": [
                  {
                    "id": 1,
                    "name": "medium"
                  }
                ],
                "definedContainerItems": [
                  {}
                ],
                "containerOptions": {}
              },
              "quantity": 2,
              "size": {
                "id": 1,
                "name": "medium"
              },
              "orderedContainerItems": [
                {}
              ]
            },
            "description": "The OrderMenuItem that is the container for this item",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderMenuItem"
              }
            ]
          },
          "containedItem": {
            "example": {
              "id": 1,
              "itemname": "Classic Apple",
              "category": {},
              "validSizes": [
                {
                  "id": 1,
                  "name": "medium"
                }
              ],
              "definedContainerItems": [
                {}
              ],
              "containerOptions": {}
            },
            "description": "The MenuItem being contained",
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItem"
              }
            ]
          },
          "containedItemSize": {
            "example": {
              "id": 1,
              "name": "medium"
            },
            "description": "The size of the contained MenuItem",
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItemSize"
              }
            ]
          },
          "quantity": {
            "type": "number",
            "example": "2",
            "description": "The amount of the contained MenuItem being ordered"
          }
        },
        "required": [
          "id",
          "parentOrderItem",
          "containedItem",
          "containedItemSize",
          "quantity"
        ]
      },
      "OrderMenuItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "order": {
            "example": {
              "id": 1,
              "orderCategory": {},
              "recipient": "alberto",
              "createdAt": "2025-07-13T19:29:35.752Z",
              "updatedAt": "2025-07-13T19:29:35.752Z",
              "fulfilllmentType": "delivery",
              "fulfillmentContactName": "not alberto",
              "deliveryAddress": "123 main st",
              "phoneNumber": "555-155-2194",
              "email": "email@email.com",
              "note": "instructions",
              "isFrozen": false,
              "isWeekly": true,
              "weeklyFulfillment": "monday",
              "orderedItems": [
                {}
              ]
            },
            "description": "The Order this ordered item is on",
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "menuItem": {
            "example": {
              "id": 1,
              "itemname": "Classic Apple",
              "category": {},
              "validSizes": [
                {
                  "id": 1,
                  "name": "medium"
                }
              ],
              "definedContainerItems": [
                {}
              ],
              "containerOptions": {}
            },
            "description": "The MenuItem being ordered",
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItem"
              }
            ]
          },
          "quantity": {
            "type": "number",
            "example": 3,
            "description": "The amount of the MenuItem being ordered"
          },
          "size": {
            "example": {
              "id": 1,
              "name": "medium"
            },
            "description": "The size of the ordered MenuItem",
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItemSize"
              }
            ]
          },
          "orderedContainerItems": {
            "example": [
              {
                "id": 1,
                "parentOrderItem": {},
                "containedItem": {
                  "id": 1,
                  "itemname": "Classic Apple",
                  "category": {},
                  "validSizes": [
                    {
                      "id": 1,
                      "name": "medium"
                    }
                  ],
                  "definedContainerItems": [
                    {}
                  ],
                  "containerOptions": {}
                },
                "containedItemSize": {
                  "id": 1,
                  "name": "medium"
                },
                "quantity": 2
              }
            ],
            "description": "If the ordered MenuItem is a container, the contained items will be listed here",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderContainerItem"
            }
          }
        },
        "required": [
          "id",
          "order",
          "menuItem",
          "quantity",
          "size",
          "orderedContainerItems"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "orderCategory": {
            "example": {
              "id": 1,
              "categoryName": "wholesale",
              "orders": [
                {}
              ]
            },
            "description": "The assigned category of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderCategory"
              }
            ]
          },
          "recipient": {
            "type": "string",
            "example": "Cassandra del Apocalypto",
            "description": "The name of the owner of the order"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-06-06T19:22:07.102Z",
            "description": "The date the order was created in the DB"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-06-06T19:22:07.102Z",
            "description": "The date the order was last modified."
          },
          "fulfillmentDate": {
            "format": "date-time",
            "type": "string",
            "example": "2025-06-06T19:22:07.102Z",
            "description": "The date the order is due to be picked up or delivered."
          },
          "fulfillmentType": {
            "type": "string",
            "example": "pickup",
            "description": "The method of transferring the order to the recipient/fulfillmentContactName (pickup or delivery)"
          },
          "fulfillmentContactName": {
            "type": "string",
            "example": "Marcus Bolognese",
            "description": "If the order is for delivery and the recipient property isn't who is recieving the order",
            "nullable": true
          },
          "deliveryAddress": {
            "type": "string",
            "example": "1 Broken Dreams Blvd",
            "description": "If a delivery order, that address to deliver",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "example": "555-420-6969",
            "description": "Phone number associated with order",
            "nullable": true
          },
          "email": {
            "type": "string",
            "example": "email@email.com",
            "description": "email associated with order",
            "nullable": true,
            "format": "email"
          },
          "note": {
            "type": "string",
            "example": "This is a note",
            "description": "an extra information regarding the order",
            "nullable": true
          },
          "isFrozen": {
            "type": "boolean",
            "example": true,
            "description": "A flag to 'pause' or 'freeze' an order, not included in DB queries for services like aggregates for Reports."
          },
          "isWeekly": {
            "type": "boolean",
            "example": "",
            "description": "A flag if a order occurs on a weekly basis. A traditional order has isWeekly=false (upon fulfillment the order is completed, while a wholesale standing order could occur every thursday)"
          },
          "weeklyFulfillment": {
            "type": "string",
            "example": "tuesday",
            "description": "If the order isWeekly is set to true, the day of the week the order is fulfilled on.",
            "nullable": true
          },
          "orderedItems": {
            "example": [
              {
                "id": 1,
                "order": {},
                "menuItem": {
                  "id": 1,
                  "itemname": "Classic Apple",
                  "category": {},
                  "validSizes": [
                    {
                      "id": 1,
                      "name": "medium"
                    }
                  ],
                  "definedContainerItems": [
                    {}
                  ],
                  "containerOptions": {}
                },
                "quantity": 2,
                "size": {
                  "id": 1,
                  "name": "medium"
                },
                "orderedContainerItems": [
                  {
                    "id": 1,
                    "parentOrderItem": {},
                    "containedItem": {
                      "id": 1,
                      "itemname": "Classic Apple",
                      "category": {},
                      "validSizes": [
                        {
                          "id": 1,
                          "name": "medium"
                        }
                      ],
                      "definedContainerItems": [
                        {}
                      ],
                      "containerOptions": {}
                    },
                    "containedItemSize": {
                      "id": 1,
                      "name": "medium"
                    },
                    "quantity": 2
                  }
                ]
              }
            ],
            "description": "If the ordered MenuItem is a container, the contained items will be populated here",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderMenuItem"
            }
          }
        },
        "required": [
          "id",
          "orderCategory",
          "recipient",
          "createdAt",
          "updatedAt",
          "fulfillmentDate",
          "fulfillmentType",
          "isFrozen",
          "isWeekly",
          "orderedItems"
        ]
      },
      "OrderCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "categoryName": {
            "type": "string",
            "example": "wholesale",
            "description": "Name of the category."
          },
          "orders": {
            "example": [
              {
                "id": 1,
                "orderCategory": {},
                "recipient": "alberto",
                "createdAt": "2025-07-13T19:29:35.752Z",
                "updatedAt": "2025-07-13T19:29:35.752Z",
                "fulfilllmentType": "delivery",
                "fulfillmentContactName": "not alberto",
                "deliveryAddress": "123 main st",
                "phoneNumber": "555-155-2194",
                "email": "email@email.com",
                "note": "instructions",
                "isFrozen": false,
                "isWeekly": true,
                "weeklyFulfillment": "monday",
                "orderedItems": [
                  {}
                ]
              }
            ],
            "description": "Orders under the category",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          }
        },
        "required": [
          "id",
          "categoryName",
          "orders"
        ]
      },
      "CreateOrderContainerItemDto": {
        "type": "object",
        "properties": {
          "parentOrderMenuItemId": {
            "type": "number",
            "description": "Id of the OrderMenuItem that is the parent. Only used when creating through the OrderMenuItem endpoint, since the parent isnt assigned an Id yet.",
            "example": 1
          },
          "parentContainerMenuItemId": {
            "type": "number",
            "description": "Id of the MenuItem that is this item's container",
            "example": 2
          },
          "containedMenuItemId": {
            "type": "number",
            "description": "Id of the MenuItem that is being ordered",
            "example": 3
          },
          "containedMenuItemSizeId": {
            "type": "number",
            "description": "Id of the MenuItemSize that is being ordered, must be a valid size to the containedMenuItem",
            "example": 4
          },
          "quantity": {
            "type": "number",
            "description": "amount of the containedMenuItem / containedItemSize being ordered",
            "example": 5
          }
        },
        "required": [
          "parentOrderMenuItemId",
          "parentContainerMenuItemId",
          "containedMenuItemId",
          "containedMenuItemSizeId",
          "quantity"
        ]
      },
      "CreateOrderMenuItemDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "number",
            "description": "Id of Order entity the OrderMenuItem belongs to.",
            "example": 1
          },
          "menuItemId": {
            "type": "number",
            "description": "Id of MenuItem entity being ordered.",
            "example": 2
          },
          "menuItemSizeId": {
            "type": "number",
            "description": "Id of the MenuItemSize entity. Must be valid size for the MenuItem being ordered.",
            "example": 3
          },
          "quantity": {
            "type": "number",
            "description": "Amount being ordered."
          },
          "orderedItemContainerDtos": {
            "description": "Dtos when creating an OrderMenuItem entity that is a container for a list of MenuItem",
            "example": [
              {
                "parentContainerMenuItemId": 10,
                "containedMenuItemId": 4,
                "containedMenuItemSizeId": 5,
                "quantity": 6
              },
              {
                "parentContainerMenuItemId": 10,
                "containedMenuItemId": 7,
                "containedMenuItemSizeId": 8,
                "quantity": 9
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrderContainerItemDto"
            }
          }
        },
        "required": [
          "orderId",
          "menuItemId",
          "menuItemSizeId",
          "quantity"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "orderCategoryId": {
            "type": "number",
            "example": 1,
            "description": "Id of OrderType entity."
          },
          "recipient": {
            "type": "string",
            "description": "Name of the owner of the order",
            "example": "John Smith"
          },
          "fulfillmentContactName": {
            "type": "string",
            "description": "Name of who is picking up the order or reciving the delivery",
            "example": "Jane Doe",
            "nullable": true
          },
          "fulfillmentDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date the order is to be available or delivered.",
            "example": "2025-06-08T20:26:45.883Z"
          },
          "fulfillmentType": {
            "type": "string",
            "description": "Method of Order's dispersal.",
            "example": "delivery"
          },
          "deliveryAddress": {
            "type": "string",
            "description": "for delivery contact information",
            "example": "123 main st",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "for delivery contact information",
            "example": "1234568",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "for delivery contact information",
            "example": "email@email.com",
            "nullable": true,
            "format": "email"
          },
          "note": {
            "type": "string",
            "description": "special instruction for order",
            "example": "note information",
            "nullable": true
          },
          "isFrozen": {
            "type": "boolean",
            "description": "A frozen order is inactive and is not included for typical buisness logic opeations. Not included in aggregates or reports.",
            "example": false,
            "nullable": true
          },
          "isWeekly": {
            "type": "boolean",
            "description": "Is true if the order occurs on a weekly basis.",
            "example": true,
            "nullable": true
          },
          "weeklyFulfillment": {
            "type": "string",
            "description": "If is weekly, is the day of the week the order is fulfilled",
            "example": "sunday",
            "nullable": true
          },
          "orderedMenuItemDtos": {
            "description": "An array of CreateOrderMenuItemDtos.",
            "example": [
              {
                "menuItemId": 10,
                "menuItemSizeId": 2,
                "quantity": 3,
                "orderedItemContainerDtos": [
                  {
                    "parentContainerMenuItemId": 10,
                    "containedMenuItemId": 4,
                    "containedMenuItemSizeId": 5,
                    "quantity": 6
                  }
                ]
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrderMenuItemDto"
            }
          }
        },
        "required": [
          "orderCategoryId",
          "recipient",
          "fulfillmentDate",
          "fulfillmentType",
          "orderedMenuItemDtos"
        ]
      },
      "UpdateOrderContainerItemDto": {
        "type": "object",
        "properties": {
          "parentContainerMenuItemId": {
            "type": "number",
            "description": "Id of the MenuItem that is this item's container, not available to update, but required for validation",
            "example": 1
          },
          "containedMenuItemId": {
            "type": "number",
            "description": "Id of the MenuItem that is being ordered",
            "example": 2
          },
          "containedMenuItemSizeId": {
            "type": "number",
            "description": "Id of the MenuItemSize that is being ordered, must be a valid size to the containedMenuItem",
            "example": 3
          },
          "quantity": {
            "type": "number",
            "description": "amount of the containedMenuItem / containedItemSize being ordered",
            "example": 4
          }
        }
      },
      "NestedUpdateOrderContainerItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id of a OrderContainerItem entity.",
            "example": 1
          },
          "dto": {
            "description": "Update dto of a OrderContainerItem entity.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateOrderContainerItemDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "dto"
        ]
      },
      "NestedOrderContainerItemDto": {
        "type": "object",
        "properties": {
          "create": {
            "description": "Create dto of a OrderContainerItem entity.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateOrderContainerItemDto"
              }
            ]
          },
          "update": {
            "description": "Update dto of a OrderContainerItem entity.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NestedUpdateOrderContainerItemDto"
              }
            ]
          }
        },
        "required": [
          "create",
          "update"
        ]
      },
      "UpdateOrderMenuItemDto": {
        "type": "object",
        "properties": {
          "menuItemId": {
            "type": "number",
            "description": "Id of MenuItem entity being ordered.",
            "example": 1
          },
          "menuItemSizeId": {
            "type": "number",
            "description": "Id of the MenuItemSize entity. Must be valid size for the MenuItem being ordered.",
            "example": 2
          },
          "quantity": {
            "type": "number",
            "description": "Amount being ordered.",
            "example": 3
          },
          "orderedItemContainerDtos": {
            "description": "Dtos when creating an OrderMenuItem entity that is a container for a list of MenuItem",
            "example": [
              {
                "create": {
                  "parentContainerMenuItemId": 10,
                  "containedMenuItemId": 4,
                  "containedMenuItemSizeId": 5,
                  "quantity": 6
                },
                "update": {
                  "id": 1,
                  "dto": {
                    "parentContainerMenuItemId": 10,
                    "containedMenuItemId": 4,
                    "containedMenuItemSizeId": 5,
                    "quantity": 6
                  }
                }
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NestedOrderContainerItemDto"
            }
          }
        }
      },
      "NestedUpdateOrderMenuItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id of a OrderMenuItem entity.",
            "example": 1
          },
          "dto": {
            "description": "Update dto of a OrderMenuItem entity.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateOrderMenuItemDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "dto"
        ]
      },
      "NestedOrderMenuItemDto": {
        "type": "object",
        "properties": {
          "create": {
            "description": "Create dto of a OrderMenuItem entity.",
            "example": {
              "orderId": 1,
              "menuItemId": 2,
              "menuItemSizeId": 3,
              "quantity": 4
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateOrderMenuItemDto"
              }
            ]
          },
          "update": {
            "description": "Update dto of a OrderMenuItem entity.",
            "example": {
              "id": 1,
              "dto": {
                "menuItemId": 2,
                "menuItemSizeId": 3,
                "quantity": 4
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/NestedUpdateOrderMenuItemDto"
              }
            ]
          }
        },
        "required": [
          "create",
          "update"
        ]
      },
      "UpdateOrderDto": {
        "type": "object",
        "properties": {
          "orderCategoryId": {
            "type": "number",
            "description": "Id of OrderType entity.",
            "example": 1,
            "nullable": true
          },
          "recipient": {
            "type": "string",
            "description": "Name of the owner of the order",
            "example": "John Smith",
            "nullable": true
          },
          "fulfillmentContactName": {
            "type": "string",
            "description": "Name of who is picking up the order or reciving the delivery",
            "example": "Jane Doe",
            "nullable": true
          },
          "fulfillmentDate": {
            "type": "string",
            "description": "Date the order is to be available or delivered.",
            "example": "2025-06-08T20:26:45.883Z",
            "nullable": true
          },
          "fulfillmentType": {
            "type": "string",
            "description": "Method of Order's dispersal.",
            "example": "delivery",
            "nullable": true
          },
          "deliveryAddress": {
            "type": "string",
            "description": "for delivery contact information",
            "example": "123 main st",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "for delivery contact information",
            "example": "1234568",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "for delivery contact information",
            "example": "email@email.com",
            "nullable": true,
            "format": "email"
          },
          "note": {
            "type": "string",
            "description": "special instruction for order",
            "example": "note information",
            "nullable": true
          },
          "isFrozen": {
            "type": "boolean",
            "description": "A frozen order is inactive and is not included for typical buisness logic opeations. Not included in aggregates or reports.",
            "example": false,
            "nullable": true
          },
          "isWeekly": {
            "type": "boolean",
            "description": "Is true if the order occurs on a weekly basis.",
            "example": true,
            "nullable": true
          },
          "weeklyFulfillment": {
            "type": "string",
            "description": "If is weekly, is the day of the week the order is fulfilled",
            "example": "sunday",
            "nullable": true
          },
          "orderedMenuItemDtos": {
            "description": "An array of CreateChildOrderMenuItemDtos. Child dtos are used when creating an Order entity with child entites.",
            "nullable": true,
            "example": [
              {
                "create": {
                  "orderId": 1,
                  "menuItemId": 2,
                  "menuItemSizeId": 3,
                  "quantity": 4
                },
                "update": {
                  "id": 1,
                  "dto": {
                    "menuItemId": 2,
                    "menuItemSizeId": 3,
                    "quantity": 4
                  }
                }
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NestedOrderMenuItemDto"
            }
          }
        }
      },
      "CreateOrderCategoryDto": {
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string",
            "description": "Name of the OrderCategory entity.",
            "example": "Wholesale"
          }
        },
        "required": [
          "categoryName"
        ]
      },
      "UpdateOrderCategoryDto": {
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string",
            "description": "Name of the OrderCategory entity.",
            "example": "Wholesale"
          }
        }
      },
      "CreateMenuItemCategoryDto": {
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string",
            "example": "Pastry",
            "description": "Name of the MenuItemCategory."
          }
        },
        "required": [
          "categoryName"
        ]
      },
      "UpdateMenuItemCategoryDto": {
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string",
            "example": "Pie",
            "description": "Name of the MenuItemCategory."
          }
        }
      },
      "CreateMenuItemSizeDto": {
        "type": "object",
        "properties": {
          "sizeName": {
            "type": "string",
            "description": "Name of MenuItemSize entity.",
            "example": "medium"
          }
        },
        "required": [
          "sizeName"
        ]
      },
      "UpdateMenuItemSizeDto": {
        "type": "object",
        "properties": {
          "sizeName": {
            "type": "string",
            "description": "Name of MenuItemSize entity.",
            "example": "medium"
          }
        },
        "required": [
          "sizeName"
        ]
      },
      "CreateMenuItemContainerItemDto": {
        "type": "object",
        "properties": {
          "parentContainerId": {
            "type": "number",
            "description": "Id of a MenuItem entity, the parent container to the child MenuItem component.",
            "example": 1
          },
          "parentContainerSizeId": {
            "type": "number",
            "description": "Id of a MenuItemSize entity of the parent container",
            "example": 2
          },
          "containedMenuItemId": {
            "type": "number",
            "description": "Id of a MenuItem entity. Represents the contained MenuItem item.",
            "example": 3
          },
          "containedMenuItemSizeId": {
            "type": "number",
            "description": "Id of a MenuItemSize entity. The size of the contained item",
            "example": 4
          },
          "quantity": {
            "type": "number",
            "description": "The amount of MenuItem/MenuItemSize combination",
            "example": 5
          }
        },
        "required": [
          "parentContainerId",
          "parentContainerSizeId",
          "containedMenuItemId",
          "containedMenuItemSizeId",
          "quantity"
        ]
      },
      "CreateMenuItemContainerRuleDto": {
        "type": "object",
        "properties": {
          "parentContainerOptionsId": {
            "type": "number",
            "description": "Id of the MenuItemContainerOptions entity. Pass this property when creating through the MenuItemContainerRule endpoint (rather than through the MenuItem",
            "example": 1,
            "nullable": true
          },
          "validMenuItemId": {
            "type": "number",
            "description": "Id of a MenuItem entity that is a valid component",
            "example": 2
          },
          "validSizeIds": {
            "description": "Id of a MenuItemSize entity that is a valid size to the validMenuItem, and to the container",
            "example": [
              3,
              4
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "parentContainerOptionsId",
          "validMenuItemId",
          "validSizeIds"
        ]
      },
      "CreateMenuItemContainerOptionsDto": {
        "type": "object",
        "properties": {
          "parentContainerMenuItemId": {
            "type": "number",
            "description": "Id of the MenuItem entity that the options apply to.",
            "example": 1
          },
          "containerRuleDtos": {
            "description": "The list of MenuItems and their sizes that are allowed in the container",
            "example": [
              {
                "validMenuItemId": 2,
                "validSizeIds": [
                  3,
                  4
                ]
              },
              {
                "validMenuItemId": 5,
                "validSizeIds": [
                  6,
                  7
                ]
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMenuItemContainerRuleDto"
            }
          },
          "validQuantity": {
            "type": "number",
            "description": "The total size of the container. When ordered, the summation of ordermenuitemcomponents have to equal this value.",
            "example": 8
          }
        },
        "required": [
          "parentContainerMenuItemId",
          "containerRuleDtos",
          "validQuantity"
        ]
      },
      "CreateMenuItemDto": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "number",
            "description": "Id of MenuItemCategory entity.",
            "example": 1,
            "nullable": true
          },
          "itemName": {
            "type": "string",
            "description": "Name of MenuItem entity.",
            "example": "classic apple"
          },
          "veganOptionMenuId": {
            "type": "number",
            "description": "Id of MenuItem entity that is the vegan version of the referencing MenuItem.",
            "example": 2,
            "nullable": true
          },
          "takeNBakeOptionMenuId": {
            "type": "number",
            "description": "Id of MenuItem entity that is the Take 'n Bake version of the referencing MenuItem.",
            "example": 3,
            "nullable": true
          },
          "veganTakeNBakeOptionMenuId": {
            "type": "number",
            "description": "Id of MenuItem entity that is the vegan Take 'n Bake version of the referencing MenuItem.",
            "example": 4
          },
          "validSizeIds": {
            "type": "array",
            "items": {
              "description": "Ids of MenuItemSize entities. Represents the sizes available for the referencing MenuItem.",
              "example": [
                5,
                6
              ],
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          "isPOTM": {
            "type": "boolean",
            "description": "Is Pie of the Month, monthly rotating special, relevant for Pie baking lists.",
            "example": false
          },
          "isParbake": {
            "type": "boolean",
            "description": "If pie requires parbaked shells",
            "example": false,
            "nullable": true
          },
          "definedContainerItemDtos": {
            "description": "Array of CreateMenutItemContainerItemDtos",
            "example": [
              {
                "parentContainerSizeId": 1,
                "containedMenuItemId": 2,
                "containedMenuItemSizeId": 3,
                "quantity": 4
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMenuItemContainerItemDto"
            }
          },
          "containerOptionDto": {
            "description": "options for the menuItem if it serves as a container to other items. Sets rules like valid items, sizes, and quantity of the container.",
            "example": {
              "containerRuleDtos": [
                {
                  "mode": "create",
                  "validMenuItemId": 5,
                  "validSizeIds": [
                    6,
                    7
                  ]
                },
                {
                  "mode": "create",
                  "validMenuItemId": 8,
                  "validSizeIds": [
                    9,
                    10
                  ]
                }
              ],
              "validQuantity": 11
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateMenuItemContainerOptionsDto"
              }
            ]
          }
        },
        "required": [
          "categoryId",
          "itemName",
          "validSizeIds",
          "definedContainerItemDtos",
          "containerOptionDto"
        ]
      },
      "UpdateMenuItemContainerItemDto": {
        "type": "object",
        "properties": {
          "containedMenuItemId": {
            "type": "number",
            "description": "Id of a MenuItem entity. Represents the contained item.",
            "example": 1
          },
          "containedMenuItemSizeId": {
            "type": "number",
            "description": "Id of a MenuItemSize entity. The size of the contained item",
            "example": 2
          },
          "quantity": {
            "type": "number",
            "description": "The amount of MenuItem/MenuItemSize combination",
            "example": 3
          }
        }
      },
      "NestedUpdateMenuItemContainerItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id of a MenuItemContainerItem entity.",
            "example": 1
          },
          "dto": {
            "description": "UpdateMenuItemContainerItemDto",
            "example": {
              "containedMenuItemId": 2,
              "containedMenuItemSizeId": 3,
              "quantity": 4
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateMenuItemContainerItemDto"
              }
            ]
          }
        }
      },
      "UpdateMenuItemContainerRuleDto": {
        "type": "object",
        "properties": {
          "validMenuItemId": {
            "type": "number",
            "description": "Id of a MenuItem entity that is a valid component",
            "example": 1
          },
          "validSizeIds": {
            "description": "Id of a MenuItemSize entity that is a valid size to the validMenuItem, and to the container",
            "example": [
              2,
              3
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NestedUpdateMenuItemContainerRuleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id of a MenuItemContainerRule entity.",
            "example": 1
          },
          "dto": {
            "description": "Update dto of a MenuItemContainerRule entity.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateMenuItemContainerRuleDto"
              }
            ]
          }
        }
      },
      "NestedMenuItemContainerRuleDto": {
        "type": "object",
        "properties": {
          "create": {
            "description": "Create dto of a MenuItemContainerRule entity.",
            "example": {
              "validMenuItemId": 1,
              "validSizeIds": [
                1,
                2
              ]
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateMenuItemContainerRuleDto"
              }
            ]
          },
          "update": {
            "description": "Update dto of a MenuItemContainerRule entity.",
            "example": {
              "id": 1,
              "dto": {
                "validMenuItemId": 2,
                "validSizeIds": [
                  3,
                  4
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/NestedUpdateMenuItemContainerRuleDto"
              }
            ]
          }
        }
      },
      "UpdateMenuItemContainerOptionsDto": {
        "type": "object",
        "properties": {
          "containerRuleDtos": {
            "description": "The list of MenuItems and their sizes that are allowed in the container",
            "example": [
              {
                "create": {
                  "validMenuItemId": 2,
                  "validSizeIds": [
                    3,
                    4
                  ]
                }
              },
              {
                "update": {
                  "id": 5,
                  "dto": {
                    "validMenuItemId": 6,
                    "validSizeIds": [
                      7,
                      8
                    ]
                  }
                }
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NestedMenuItemContainerRuleDto"
            }
          },
          "validQuantity": {
            "type": "number",
            "description": "The total size of the container. When ordered, the summation of OrderMenuItemComponents have to equal this value.",
            "example": 1
          }
        }
      },
      "NestedMenuItemContainerOptionsDto": {
        "type": "object",
        "properties": {
          "create": {
            "description": "CreateMenuItemContainerOptionsDto",
            "example": {
              "parentContainerMenuItemId": 1,
              "containerRuleDtos": [
                {
                  "validMenuItemId": 2,
                  "validSizeIds": [
                    3,
                    4
                  ]
                }
              ],
              "validQuantity": 5
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateMenuItemContainerOptionsDto"
              }
            ]
          },
          "update": {
            "description": "UpdateMenuItemContainerOptionsDto",
            "example": {
              "id": 1,
              "dto": {
                "containerRuleDtos": [
                  1,
                  2
                ],
                "validQuantity": 3
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateMenuItemContainerOptionsDto"
              }
            ]
          }
        }
      },
      "UpdateMenuItemDto": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "number",
            "description": "Id of MenuItemCategory entity. Pass a null value to remove category",
            "example": 1,
            "nullable": true
          },
          "itemName": {
            "type": "string",
            "description": "Name of MenuItem entity.",
            "example": "box of 6 muffins",
            "nullable": true
          },
          "veganOptionMenuId": {
            "type": "number",
            "description": "Id of MenuItem entity that is the vegan version of the referencing MenuItem. Pass a null value to remove vegan option",
            "example": 2,
            "nullable": true
          },
          "takeNBakeOptionMenuId": {
            "type": "number",
            "description": "Id of MenuItem entity that is the Take 'n Bake version of the referencing MenuItem. Pass a null value to remove take n bake option",
            "example": 3,
            "nullable": true
          },
          "veganTakeNBakeOptionMenuId": {
            "type": "number",
            "description": "Id of MenuItem entity that is the vegan Take 'n Bake version of the referencing MenuItem. Pass a null value to remove vegan take n bake option",
            "example": 4,
            "nullable": true
          },
          "validSizeIds": {
            "description": "Ids of MenuItemSize entities. Represents the sizes available for the referencing MenuItem.",
            "example": [
              5,
              6
            ],
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "isPOTM": {
            "type": "boolean",
            "description": "Is Pie of the Month, monthly rotating special, relevant for Pie baking lists.",
            "example": false,
            "nullable": true
          },
          "isParbake": {
            "type": "boolean",
            "description": "Pie requires parbaked shells",
            "example": false,
            "nullable": true
          },
          "definedContainerItemDtos": {
            "description": "Array of CreateChildMenutItemContainerItemDtos. Child dtos are used when creating a parent with child entities. Pass a null value to remove defined container",
            "example": [
              {
                "id": 1,
                "dto": {
                  "containedMenuItemId": 6,
                  "containedMenuItemSizeId": 7,
                  "quantity": 8
                }
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NestedUpdateMenuItemContainerItemDto"
            }
          },
          "containerOptionDto": {
            "description": "options for the menuItem if it serves as a container to other items. Sets rules like valid items and item sizes, and quantity of the container. Pass a null value to remove container options",
            "example": {
              "create": {
                "parentContainerMenuItemId": 1,
                "containerRuleDtos": [
                  {
                    "validMenuItemId": 2,
                    "validSizeIds": [
                      3,
                      4
                    ]
                  }
                ],
                "validQuantity": 5
              },
              "update": {
                "id": 1,
                "dto": {
                  "containerRuleDtos": [
                    {
                      "validMenuItemId": 5,
                      "validSizeIds": [
                        6,
                        7
                      ]
                    }
                  ],
                  "id": 8,
                  "validMenuItemId": 9,
                  "validSizeIds": [
                    10,
                    11
                  ],
                  "validQuantity": 12
                }
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/NestedMenuItemContainerOptionsDto"
              }
            ]
          }
        }
      },
      "Template": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "templateName": {
            "type": "string",
            "example": "Spring Pies",
            "description": "Name of the template"
          },
          "isPie": {
            "type": "boolean",
            "example": true,
            "description": "Differentiates whether the template is for pie products or not."
          },
          "templateItems": {
            "example": [
              {
                "id": 1,
                "displayName": "CLAPPLE",
                "menuItem": {
                  "id": 1,
                  "itemname": "Classic Apple",
                  "category": {},
                  "validSizes": [
                    {
                      "id": 1,
                      "name": "medium"
                    }
                  ],
                  "definedContainerItems": [
                    {}
                  ],
                  "containerOptions": {}
                },
                "tablePosIndex": 0,
                "parentTemplate": {}
              }
            ],
            "description": "A list of template items representing the rows of the printed template",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateMenuItem"
            }
          }
        },
        "required": [
          "id",
          "templateName",
          "isPie",
          "templateItems"
        ]
      },
      "TemplateMenuItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "displayName": {
            "type": "string",
            "example": "CLAPPLE",
            "description": "Name to be printed on document representing the MenuItem"
          },
          "menuItem": {
            "example": {
              "id": 1,
              "itemname": "Classic Apple",
              "category": {},
              "validSizes": [
                {
                  "id": 1,
                  "name": "medium"
                }
              ],
              "definedContainerItems": [
                {}
              ],
              "containerOptions": {}
            },
            "description": "The item being represented in the template item (as a row on the template)",
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItem"
              }
            ]
          },
          "tablePosIndex": {
            "type": "number",
            "example": 0,
            "description": "The index specifying the row order of this template item on the template (0 being the first row at the top ignoring the header row)"
          },
          "parentTemplate": {
            "example": {
              "id": 1,
              "templateName": "Summer Pies",
              "isPie": true,
              "templateItems": [
                {}
              ]
            },
            "description": "The template this template item is for",
            "allOf": [
              {
                "$ref": "#/components/schemas/Template"
              }
            ]
          }
        },
        "required": [
          "id",
          "displayName",
          "menuItem",
          "tablePosIndex",
          "parentTemplate"
        ]
      },
      "CreateChildTemplateMenuItemDto": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "Declare whether creating or updating a child entity. Relevant when creating/updating a Template entity.",
            "example": "create"
          },
          "displayName": {
            "type": "string",
            "description": "Name to be used on the baking list representing the referenced MenuItem.",
            "example": "BLUE"
          },
          "menuItemId": {
            "type": "number",
            "description": "Id of the MenuItem entity being displayed on the Template.",
            "example": 1
          },
          "tablePosIndex": {
            "type": "number",
            "description": "The row position of the TemplateMenuItem on the parent Template.",
            "example": 0
          }
        },
        "required": [
          "mode",
          "displayName",
          "menuItemId",
          "tablePosIndex"
        ]
      },
      "CreateTemplateDto": {
        "type": "object",
        "properties": {
          "templateName": {
            "type": "string",
            "description": "Name of the Template entity.",
            "example": "Summer Pies"
          },
          "isPie": {
            "type": "boolean",
            "description": "If the template displays a list of pies. Templates display either Pies or Pastries.",
            "example": false
          },
          "templateItemDtos": {
            "description": "Array of CreateChildTemplateMenuItemDtos, child dtos are used when creating a Template entity with child TemplateMenuItem entites.",
            "example": [
              {
                "mode": "create",
                "displayName": "CLAPPLE",
                "menuItemId": 1,
                "tablePosIndex": 0
              },
              {
                "mode": "create",
                "displayName": "MIX",
                "menuItemId": 2,
                "tablePosIndex": 1
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateChildTemplateMenuItemDto"
            }
          }
        },
        "required": [
          "templateName"
        ]
      },
      "UpdateChildTemplateMenuItemDto": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "Declare whether creating or updating a child entity. Relevant when creating/updating a Template entity.",
            "example": "update"
          },
          "id": {
            "type": "number",
            "description": "Id of the TemplateMenuItem entity to be updated.",
            "example": 1
          },
          "displayName": {
            "type": "string",
            "description": "Name to be used on the baking list representing the referenced MenuItem.",
            "example": "CRUMB"
          },
          "menuItemId": {
            "type": "number",
            "description": "Id of the MenuItem entity being displayed on the Template.",
            "example": 2
          },
          "tablePosIndex": {
            "type": "number",
            "description": "The row position of the TemplateMenuItem on the parent Template.",
            "example": 3
          }
        },
        "required": [
          "mode",
          "id"
        ]
      },
      "UpdateTemplateDto": {
        "type": "object",
        "properties": {
          "templateName": {
            "type": "string",
            "description": "Name of the Template entity.",
            "example": "Spring Pastries"
          },
          "isPie": {
            "type": "boolean",
            "description": "If the template displays a list of pies. Templates display either Pies or Pastries.",
            "example": false
          },
          "templateItemDtos": {
            "description": "Mixed array of CreateChildTemplateMenuItemDtos and UpdateChildTemplateMenuItemDto, child dtos are used when updating a Template entity with created/updated child TemplateMenuItem entites.",
            "example": [
              {
                "mode": "create",
                "displayName": "CLAPPLE",
                "menuItemId": 1,
                "tablePosIndex": 0
              },
              {
                "mode": "update",
                "id": 3,
                "displayName": "MIX",
                "menuItemId": 2,
                "tablePosIndex": 1
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateChildTemplateMenuItemDto"
            }
          }
        }
      },
      "CreateTemplateMenuItemDto": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Name to be used on the baking list representing the referenced MenuItem.",
            "example": "CBP"
          },
          "menuItemId": {
            "type": "number",
            "description": "Id of the MenuItem entity being displayed on the Template.",
            "example": 1
          },
          "tablePosIndex": {
            "type": "number",
            "description": "The row position of the TemplateMenuItem on the parent Template.",
            "example": 0
          },
          "templateId": {
            "type": "number",
            "description": "Id of the parent Template entity.",
            "example": 2
          }
        },
        "required": [
          "displayName",
          "menuItemId",
          "tablePosIndex",
          "templateId"
        ]
      },
      "UpdateTemplateMenuItemDto": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Name to be used on the baking list representing the referenced MenuItem.",
            "example": "POTM"
          },
          "menuItemId": {
            "type": "number",
            "description": "Id of the MenuItem entity being displayed on the Template.",
            "example": 1
          },
          "tablePosIndex": {
            "type": "number",
            "description": "The row position of the TemplateMenuItem on the parent Template.",
            "example": 2
          },
          "templateId": {
            "type": "number",
            "description": "Id of the parent Template entity.",
            "example": 3
          }
        }
      },
      "LabelType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The unique identifier of the entity",
            "example": 1
          },
          "labelTypeName": {
            "type": "string",
            "description": "Name of the label type",
            "example": "4x2"
          },
          "labelTypeLength": {
            "type": "number",
            "description": "Length of the label in hundreths of an inch",
            "example": 400
          },
          "labelTypeWidth": {
            "type": "number",
            "description": "Width of the label in hundreths of an inch",
            "example": 200
          }
        },
        "required": [
          "id",
          "labelTypeName",
          "labelTypeLength",
          "labelTypeWidth"
        ]
      },
      "Label": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "menuItem": {
            "example": {
              "id": 1,
              "itemname": "Classic Apple",
              "category": {},
              "validSizes": [
                {
                  "id": 1,
                  "name": "medium"
                }
              ],
              "definedContainerItems": [
                {}
              ],
              "containerOptions": {}
            },
            "description": "The MenuItem this label is for",
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItem"
              }
            ]
          },
          "imageUrl": {
            "type": "string",
            "description": "URL path to the stored image file",
            "example": "http://toMyImages.gov"
          },
          "labelType": {
            "example": {
              "id": 1,
              "labelTypeName": "4x2",
              "labelTypeLength": 400,
              "labelTypeWidth": 200
            },
            "description": "The label type describing size characteristics",
            "allOf": [
              {
                "$ref": "#/components/schemas/LabelType"
              }
            ]
          }
        },
        "required": [
          "id",
          "menuItem",
          "imageUrl",
          "labelType"
        ]
      },
      "CreateLabelDto": {
        "type": "object",
        "properties": {
          "menuItemId": {
            "type": "number",
            "description": "Id of MenuItem entity.",
            "example": 1
          },
          "imageUrl": {
            "type": "string",
            "description": "URL to image on offsite storage.",
            "example": "label/url.com"
          },
          "labelTypeId": {
            "type": "number",
            "description": "Id of LabelType entity.",
            "example": 2
          }
        },
        "required": [
          "menuItemId",
          "imageUrl",
          "labelTypeId"
        ]
      },
      "UpdateLabelDto": {
        "type": "object",
        "properties": {
          "menuItemId": {
            "type": "number",
            "description": "Id of MenuItem entity.",
            "example": 1
          },
          "imageUrl": {
            "type": "string",
            "description": "URL to image on offsite storage.",
            "example": "url/image.com"
          },
          "labelTypeId": {
            "type": "number",
            "description": "Id of LabelType entity.",
            "example": 2
          }
        }
      },
      "CreateLabelTypeDto": {
        "type": "object",
        "properties": {
          "labelTypeName": {
            "type": "string",
            "description": "Name of the LabelType entity.",
            "example": "4x2"
          },
          "labelTypeLength": {
            "type": "number",
            "description": "The length of the label type in hundreths of an inch",
            "example": 400
          },
          "labelTypeWidth": {
            "type": "number",
            "description": "The length of the label type in hundreths of an inch",
            "example": 200
          }
        },
        "required": [
          "labelTypeName",
          "labelTypeLength",
          "labelTypeWidth"
        ]
      },
      "UpdateLabelTypeDto": {
        "type": "object",
        "properties": {
          "labelTypeName": {
            "type": "string",
            "description": "Name of the LabelType entity.",
            "example": "2x1"
          },
          "labelTypeLength": {
            "type": "number",
            "description": "The length of the label type in hundreths of an inch",
            "example": 200
          },
          "labelTypeWidth": {
            "type": "number",
            "description": "The length of the label type in hundreths of an inch",
            "example": 100
          }
        }
      },
      "InventoryArea": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "areaName": {
            "type": "string",
            "example": "dry storage",
            "description": "The name of the area"
          },
          "inventoryCounts": {
            "example": {
              "id": 1,
              "countDate": "2025-07-13T19:29:35.665Z",
              "inventoryArea": {},
              "countedItems": [
                {}
              ]
            },
            "description": "A list of inventory counts performed within the area",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryAreaCount"
            }
          }
        },
        "required": [
          "id",
          "areaName",
          "inventoryCounts"
        ]
      },
      "InventoryItemCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "categoryName": {
            "type": "string",
            "example": "Produce",
            "description": "Name of the category"
          },
          "categoryItems": {
            "example": [
              {
                "id": 1,
                "itemName": "flour",
                "category": {},
                "vendor": {},
                "itemSizes": [
                  {}
                ]
              }
            ],
            "description": "List of items referencing the category instance",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryItem"
            }
          }
        },
        "required": [
          "id",
          "categoryName",
          "categoryItems"
        ]
      },
      "InventoryItemVendor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "vendorName": {
            "type": "string",
            "example": "Dollar Tree",
            "description": "Name of the vendor"
          },
          "vendorItems": {
            "example": [
              {
                "id": 1,
                "itemName": "flour",
                "category": {},
                "vendor": {},
                "itemSizes": [
                  {}
                ]
              }
            ],
            "description": "InventoryItems from the vendor",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryItem"
            }
          }
        },
        "required": [
          "id",
          "vendorName",
          "vendorItems"
        ]
      },
      "UnitOfMeasureCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "categoryName": {
            "type": "string",
            "example": "Volume",
            "description": "Name of the category"
          },
          "unitsOfMeasure": {
            "example": [
              {
                "id": 1,
                "name": "pound",
                "abbreviation": "lbs",
                "category": {}
              }
            ],
            "description": "List of units of measure under the category",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnitOfMeasure"
            }
          },
          "baseConversionUnit": {
            "example": {
              "id": 1,
              "name": "pound",
              "abbreviation": "lbs",
              "category": {}
            },
            "description": "The designated unit all other units under this category use for conversions.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitOfMeasure"
              }
            ]
          }
        },
        "required": [
          "id",
          "categoryName",
          "unitsOfMeasure"
        ]
      },
      "UnitOfMeasure": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "name": {
            "type": "string",
            "example": "",
            "description": ""
          },
          "abbreviation": {
            "type": "string",
            "example": "",
            "description": ""
          },
          "category": {
            "example": {
              "id": 1,
              "categoryName": "Weight",
              "unitsOfMeasure": [
                {}
              ]
            },
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitOfMeasureCategory"
              }
            ]
          },
          "conversionFactorToBase": {
            "type": "string",
            "example": "",
            "description": ""
          }
        },
        "required": [
          "id",
          "name",
          "abbreviation"
        ]
      },
      "InventoryItemPackage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "packageName": {
            "type": "string",
            "example": "Box",
            "description": "Name description of a package type"
          }
        },
        "required": [
          "id",
          "packageName"
        ]
      },
      "InventoryItemSize": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "measureAmount": {
            "type": "number",
            "example": "8",
            "description": "The measure quantity of the measureUnit property"
          },
          "measureUnit": {
            "example": {
              "id": 1,
              "name": "pound",
              "abbreviation": "lbs",
              "category": {
                "id": 1,
                "categoryName": "Weight",
                "unitsOfMeasure": [
                  {}
                ]
              }
            },
            "description": "The unit of measure scaling the measureAmount property",
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitOfMeasure"
              }
            ]
          },
          "packageType": {
            "example": {
              "id": 1,
              "packageName": "box"
            },
            "description": "The type of package for this item's size.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryItemPackage"
              }
            ]
          },
          "inventoryItem": {
            "example": {
              "id": 1,
              "itemName": "flour",
              "category": {},
              "vendor": {},
              "itemSizes": [
                {}
              ]
            },
            "description": "The inventoryitem associated with this InventoryItemSize",
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryItem"
              }
            ]
          },
          "cost": {
            "type": "string",
            "example": "8.49",
            "description": "The cost for this inventory item / size combination"
          }
        },
        "required": [
          "id",
          "measureAmount",
          "measureUnit",
          "packageType",
          "inventoryItem",
          "cost"
        ]
      },
      "InventoryItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "itemName": {
            "type": "string",
            "example": "",
            "description": ""
          },
          "category": {
            "example": {
              "id": 1,
              "categoryName": "dry goods",
              "categoryItems": [
                {}
              ]
            },
            "description": "The assigned category",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryItemCategory"
              }
            ]
          },
          "vendor": {
            "example": {
              "id": 1,
              "vendorName": "shaws",
              "vendorItems": [
                {}
              ]
            },
            "description": "The assigned Vendor",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryItemVendor"
              }
            ]
          },
          "itemSizes": {
            "example": [
              {
                "id": 1,
                "measureAmount": 2,
                "measureUnit": {
                  "id": 1,
                  "name": "pound",
                  "abbreviation": "lbs",
                  "category": {}
                },
                "packageType": {
                  "id": 1,
                  "packageName": "box"
                },
                "inventoryItem": {},
                "cost": "18.99"
              }
            ],
            "description": "The size options to the item",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryItemSize"
            }
          }
        },
        "required": [
          "id",
          "itemName",
          "itemSizes"
        ]
      },
      "InventoryAreaItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "parentInventoryCount": {
            "example": {
              "id": 1,
              "countDate": "2025-07-13T19:29:35.664Z",
              "inventoryArea": {},
              "countedItems": [
                {}
              ]
            },
            "description": "The inventory count this item was recorded",
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryAreaCount"
              }
            ]
          },
          "countedItem": {
            "example": {
              "id": 1,
              "itemName": "flour",
              "category": {},
              "vendor": {},
              "itemSizes": [
                {}
              ]
            },
            "description": "The inventory item that was recorded",
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryItem"
              }
            ]
          },
          "amount": {
            "type": "number",
            "example": 1,
            "description": "The unit amount of the recorded inventory item / size combination"
          },
          "countedItemSize": {
            "example": {
              "id": 1,
              "measureAmount": 2,
              "measureUnit": {
                "id": 1,
                "name": "pound",
                "abbreviation": "lbs",
                "category": {}
              },
              "packageType": {
                "id": 1,
                "packageName": "box"
              },
              "inventoryItem": {},
              "cost": "18.99"
            },
            "description": "The size of the inventory item recorded",
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryItemSize"
              }
            ]
          }
        },
        "required": [
          "id",
          "parentInventoryCount",
          "countedItem",
          "amount",
          "countedItemSize"
        ]
      },
      "InventoryAreaCount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "countDate": {
            "format": "date-time",
            "type": "string",
            "example": "2025-06-05T23:00:17.814Z",
            "description": "The date the count was taken"
          },
          "inventoryArea": {
            "example": {
              "id": 1,
              "areaName": "dry storage",
              "inventoryCounts": [
                {}
              ]
            },
            "description": "The area where the count was taken",
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryArea"
              }
            ]
          },
          "countedItems": {
            "example": [
              {
                "id": 1,
                "parentInventoryCount": {},
                "countedItem": {
                  "id": 1,
                  "itemName": "flour",
                  "category": {},
                  "vendor": {},
                  "itemSizes": [
                    {}
                  ]
                },
                "amount": 1,
                "countedItemSize": {
                  "id": 1,
                  "measureAmount": 2,
                  "measureUnit": {
                    "id": 1,
                    "name": "pound",
                    "abbreviation": "lbs",
                    "category": {}
                  },
                  "packageType": {
                    "id": 1,
                    "packageName": "box"
                  },
                  "inventoryItem": {},
                  "cost": "18.99"
                }
              }
            ],
            "description": "Inventory items that were recorded during the count.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryAreaItem"
              }
            ]
          }
        },
        "required": [
          "id",
          "countDate",
          "inventoryArea",
          "countedItems"
        ]
      },
      "CreateInventoryAreaDto": {
        "type": "object",
        "properties": {
          "areaName": {
            "type": "string",
            "description": "Name of the InventoryArea.",
            "example": "Dry Storage"
          }
        },
        "required": [
          "areaName"
        ]
      },
      "UpdateInventoryAreaDto": {
        "type": "object",
        "properties": {
          "areaName": {
            "type": "string",
            "description": "Name of the InventoryArea.",
            "example": "Dry Storage"
          }
        }
      },
      "CreateInventoryItemSizeDto": {
        "type": "object",
        "properties": {
          "inventoryItemId": {
            "description": "Id of InventoryItem entity.",
            "example": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryItem"
            }
          },
          "measureUnitId": {
            "type": "number",
            "description": "Id of UnitofMeasure entity.",
            "example": 2
          },
          "measureAmount": {
            "type": "number",
            "description": "the unit quantity of the UnitofMeasure entity.",
            "example": 10
          },
          "inventoryPackageId": {
            "type": "number",
            "description": "Id of InventoryItemPackage entity.",
            "example": 3
          },
          "cost": {
            "type": "number",
            "description": "Price paid for the InventoryItem entity.",
            "example": 4.99
          }
        },
        "required": [
          "inventoryItemId",
          "measureUnitId",
          "measureAmount",
          "inventoryPackageId",
          "cost"
        ]
      },
      "CreateInventoryAreaItemDto": {
        "type": "object",
        "properties": {
          "parentInventoryCountId": {
            "type": "number",
            "description": "Id for InventoryAreaCount entity.",
            "example": 1
          },
          "countedInventoryItemId": {
            "type": "number",
            "description": "Id for InventoryItem entity.",
            "example": 2
          },
          "countedAmount": {
            "type": "number",
            "description": "The amount of InventoryItem per unit.",
            "example": 6
          },
          "countedItemSizeId": {
            "type": "number",
            "description": "Id for InventoryItemSize entity. If countedItemSizeId is null, countedItemSizeDto must be populated.",
            "example": 3
          },
          "countedItemSizeDto": {
            "description": "Is optional, if countedItemSizeDto is null, countedItemSizeId must be populated.",
            "example": {
              "mode": "create",
              "measureUnitId": 1,
              "measureAmount": 2,
              "inventoryPackageId": 3,
              "cost": 4.99
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateInventoryItemSizeDto"
              }
            ]
          }
        },
        "required": [
          "parentInventoryCountId",
          "countedInventoryItemId",
          "countedAmount",
          "countedItemSizeId",
          "countedItemSizeDto"
        ]
      },
      "CreateInventoryAreaCountDto": {
        "type": "object",
        "properties": {
          "inventoryAreaId": {
            "type": "number",
            "description": "Id for InventoryArea entity.",
            "example": 1
          },
          "itemCountDtos": {
            "description": "Counted InventoryItems for the InventoryAreaCount.",
            "example": [
              {
                "mode": "create",
                "countedInventoryItemId": 1,
                "countedAmount": 2,
                "countedItemSizeId": 3,
                "countedItemSizeDto": {
                  "mode": "create",
                  "measureUnitId": 4,
                  "measureAmount": 5,
                  "inventoryPackageId": 6,
                  "cost": 7.99
                }
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryAreaItemDto"
            }
          }
        },
        "required": [
          "inventoryAreaId",
          "itemCountDtos"
        ]
      },
      "UpdateInventoryItemSizeDto": {
        "type": "object",
        "properties": {
          "measureUnitId": {
            "type": "number",
            "description": "Id of UnitofMeasure entity.",
            "example": 1
          },
          "measureAmount": {
            "type": "number",
            "description": "the unit quantity of the UnitofMeasure entity.",
            "example": 10
          },
          "inventoryPackageId": {
            "type": "number",
            "description": "Id of InventoryItemPackage entity.",
            "example": 2
          },
          "cost": {
            "type": "number",
            "description": "Prsice paid for the InventoryItem entity.",
            "example": 3.99
          }
        }
      },
      "NestedUpdateInventoryItemSizeDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id of InventoryItemSize entity.",
            "example": 1
          },
          "dto": {
            "description": "UpdateInventoryItemSizeDto for InventoryItemSize entity.",
            "example": {
              "measureUnitId": 1,
              "measureAmount": 10,
              "inventoryPackageId": 1,
              "cost": 100
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateInventoryItemSizeDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "dto"
        ]
      },
      "UpdateInventoryAreaItemDto": {
        "type": "object",
        "properties": {
          "countedInventoryItemId": {
            "type": "number",
            "description": "Id for InventoryItem entity.",
            "example": 1
          },
          "countedAmount": {
            "type": "number",
            "description": "The amount of InventoryItem per unit.",
            "example": 6
          },
          "countedItemSizeId": {
            "type": "number",
            "description": "Id for InventoryItemSize entity. If countedItemSizeId is populated, countedItemSizeDto must be null/undefined.",
            "example": 2
          },
          "countedItemSizeDto": {
            "description": "If countedItemSizeDto is populated, countedItemSizeId must be null/undefined.",
            "example": {
              "mode": "update",
              "id": 5,
              "measureUnitId": 1,
              "measureAmount": 2,
              "inventoryPackageId": 3,
              "cost": 4.99
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/NestedUpdateInventoryItemSizeDto"
              }
            ]
          }
        }
      },
      "NestedUpdateInventoryAreaItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id for InventoryAreaItem entity.",
            "example": 1
          },
          "dto": {
            "description": "UpdateInventoryAreaItemDto for InventoryAreaItem entity.",
            "example": {
              "measureUnitId": 4,
              "measureAmount": 5,
              "inventoryPackageId": 6,
              "cost": 7.99
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateInventoryAreaItemDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "dto"
        ]
      },
      "UpdateInventoryAreaCountDto": {
        "type": "object",
        "properties": {
          "inventoryAreaId": {
            "type": "number",
            "description": "Id for Inventory-Area entity.",
            "example": 1
          },
          "itemCountDtos": {
            "description": "Counted InventoryItems for the InventoryAreaCount.",
            "example": [
              {
                "id": 1,
                "dto": {
                  "measureUnitId": 4,
                  "measureAmount": 5,
                  "inventoryPackageId": 6,
                  "cost": 7.99
                }
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NestedUpdateInventoryAreaItemDto"
            }
          }
        },
        "required": [
          "itemCountDtos"
        ]
      },
      "CreateInventoryItemDto": {
        "type": "object",
        "properties": {
          "itemName": {
            "type": "string",
            "description": "Name of InventoryItem entity.",
            "example": "Evaporated Milk"
          },
          "inventoryItemCategoryId": {
            "type": "number",
            "description": "Id of InventoryItemCategory entity.",
            "example": 1,
            "nullable": true
          },
          "vendorId": {
            "type": "number",
            "description": "Id of InventoryItemVendor entity.",
            "example": 2,
            "nullable": true
          },
          "itemSizeDtos": {
            "description": "Child dtos are used when creating/updating an entity through a parent (InventoryItem).",
            "example": [
              {
                "measureUnitId": 1,
                "measureAmount": 2,
                "inventoryPackageId": 3,
                "cost": 4.99
              }
            ],
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryItemSizeDto"
            }
          }
        },
        "required": [
          "itemName"
        ]
      },
      "UpdateInventoryItemDto": {
        "type": "object",
        "properties": {
          "itemName": {
            "type": "string",
            "description": "Name of InventoryItem entity.",
            "example": "Sliced Almonds"
          },
          "inventoryItemCategoryId": {
            "type": "number",
            "description": "Id of InventoryItemCategory entity.",
            "example": 1,
            "nullable": true
          },
          "vendorId": {
            "type": "number",
            "example": 2,
            "description": "Id of InventoryItemVendor entity.",
            "nullable": true
          },
          "itemSizeDtos": {
            "description": "Mixed array of CreateInventoryItemSizeDtos and NestedUpdateInventoryItemSizeDtos.",
            "example": [
              {
                "createDto": {
                  "measureUnitId": 1,
                  "measureAmount": 10,
                  "inventoryPackageId": 1,
                  "cost": 100
                },
                "updateDto": {
                  "id": 1,
                  "dto": {
                    "measureUnitId": 6,
                    "measureAmount": 7,
                    "inventoryPackageId": 8,
                    "cost": 9.99
                  }
                }
              }
            ],
            "nullable": true,
            "items": {
              "type": "array"
            },
            "type": "array"
          },
          "cost": {
            "type": "number",
            "description": "Price paid for the InventoryItem entity.",
            "example": 5.99,
            "nullable": true
          }
        }
      },
      "CreateInventoryItemCategoryDto": {
        "type": "object",
        "properties": {
          "itemCategoryName": {
            "type": "string",
            "example": "Dairy",
            "description": "Name of InventoryItemCategory entity."
          }
        },
        "required": [
          "itemCategoryName"
        ]
      },
      "UpdateInventoryItemCategoryDto": {
        "type": "object",
        "properties": {
          "itemCategoryName": {
            "type": "string",
            "example": "Dry Goods",
            "description": "Name of InventoryItemCategory entity."
          }
        }
      },
      "CreateInventoryItemPackageDto": {
        "type": "object",
        "properties": {
          "packageName": {
            "type": "string",
            "example": "Box",
            "description": "Name for InventoryItemPackage entity."
          }
        },
        "required": [
          "packageName"
        ]
      },
      "UpdateInventoryItemPackageDto": {
        "type": "object",
        "properties": {
          "packageName": {
            "type": "string",
            "example": "Can",
            "description": "Name for InventoryItemPackage entity."
          }
        }
      },
      "CreateInventoryItemVendorDto": {
        "type": "object",
        "properties": {
          "vendorName": {
            "type": "string",
            "description": "Name of InventoryItemVendor entity.",
            "example": "Cysco"
          }
        },
        "required": [
          "vendorName"
        ]
      },
      "UpdateInventoryItemVendorDto": {
        "type": "object",
        "properties": {
          "vendorName": {
            "type": "string",
            "description": "Name of InventoryItemVendor entity.",
            "example": "Driscols"
          }
        }
      },
      "CreateUnitOfMeasureDto": {
        "type": "object",
        "properties": {
          "unitName": {
            "type": "string",
            "description": "Name of the UnitofMeasure entity.",
            "example": "Pound"
          },
          "abbreviation": {
            "type": "string",
            "description": "abbrieviation of the UnitofMeasure entity's name.",
            "example": "lb"
          },
          "categoryId": {
            "type": "number",
            "description": "Id of the UnitofMeasureCategory entity that the UnitofMeasure falls under.",
            "example": 1
          },
          "conversionFactorToBase": {
            "type": "string",
            "description": "The conversion factor stored as a string to prevent rounding errors, to the base amount.",
            "example": "3785.4080001023799014"
          }
        },
        "required": [
          "unitName",
          "abbreviation"
        ]
      },
      "UpdateUnitOfMeasureDto": {
        "type": "object",
        "properties": {
          "unitName": {
            "type": "string",
            "description": "Name of the UnitofMeasure entity.",
            "example": "Kilogram"
          },
          "abbreviation": {
            "type": "string",
            "description": "abbrieviation of the UnitofMeasure entity's name.",
            "example": "kg"
          },
          "categoryId": {
            "type": "object",
            "description": "Id of the UnitofMeasureCategory entity that the UnitofMeasure falls under.",
            "example": 1
          },
          "conversionFactorToBase": {
            "type": "string",
            "description": "The conversion factor stored as a string to prevent rounding errors, to the base amount.",
            "example": "3785.4080001023799014"
          }
        }
      },
      "CreateUnitOfMeasureCategoryDto": {
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string",
            "description": "Name of UnitCategory entity.",
            "example": "Weight"
          },
          "baseUnitId": {
            "type": "number",
            "description": "The UnitOfMeasure entity that all UnitofMeasure entities under the category convert to as part of conversions.",
            "example": 1,
            "nullable": true
          }
        },
        "required": [
          "categoryName"
        ]
      },
      "UpdateUnitOfMeasureCategoryDto": {
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string",
            "description": "Name of UnitCategory entity.",
            "example": "Volume"
          },
          "baseUnitId": {
            "type": "number",
            "description": "The UnitOfMeasure entity that all UnitofMeasure entities under the category convert to as part of conversions.",
            "example": 1,
            "nullable": true
          }
        }
      },
      "RecipeSubCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "subCategoryName": {
            "type": "string",
            "example": "Savory Pie",
            "description": "Name of the subcategory"
          },
          "parentCategory": {
            "example": {
              "id": 1,
              "categoryName": "Pie",
              "subCategories": [
                {}
              ],
              "recipes": [
                {}
              ]
            },
            "description": "Category this subcategory is for",
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipeCategory"
              }
            ]
          },
          "recipes": {
            "example": [
              {
                "id": 1,
                "recipeName": "Classic Apple Pie",
                "producedMenuItem": {
                  "id": 1,
                  "itemname": "Classic Apple",
                  "category": {},
                  "validSizes": [
                    {
                      "id": 1,
                      "name": "medium"
                    }
                  ],
                  "definedContainerItems": [
                    {}
                  ],
                  "containerOptions": {}
                },
                "isIngredient": false,
                "ingredients": [
                  {}
                ],
                "batchResultQuantity": 2,
                "batchResultUnitOfMeasurement": {
                  "id": 1,
                  "name": "pound",
                  "abbreviation": "lbs",
                  "category": {}
                },
                "servingSizeQuantity": 3,
                "servingSizeUnitOfMeasurement": {
                  "id": 1,
                  "name": "pound",
                  "abbreviation": "lbs",
                  "category": {}
                },
                "salesPrice": "3.99",
                "category": {},
                "subCategory": {}
              }
            ],
            "description": "List of Recipes under the subcategory",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Recipe"
            }
          }
        },
        "required": [
          "id",
          "subCategoryName",
          "parentCategory",
          "recipes"
        ]
      },
      "RecipeCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "categoryName": {
            "type": "string",
            "example": "Pie",
            "description": "The name of the category"
          },
          "subCategories": {
            "example": [
              {
                "id": 1,
                "subCategoryName": "Savory Pie",
                "parentCategory": {},
                "recipes": [
                  {}
                ]
              }
            ],
            "description": "List of subcategories under the category",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecipeSubCategory"
            }
          },
          "recipes": {
            "example": [
              {
                "id": 1,
                "recipeName": "Classic Apple Pie",
                "producedMenuItem": {
                  "id": 1,
                  "itemname": "Classic Apple",
                  "category": {},
                  "validSizes": [
                    {
                      "id": 1,
                      "name": "medium"
                    }
                  ],
                  "definedContainerItems": [
                    {}
                  ],
                  "containerOptions": {}
                },
                "isIngredient": false,
                "ingredients": [
                  {}
                ],
                "batchResultQuantity": 2,
                "batchResultUnitOfMeasurement": {
                  "id": 1,
                  "name": "pound",
                  "abbreviation": "lbs",
                  "category": {}
                },
                "servingSizeQuantity": 3,
                "servingSizeUnitOfMeasurement": {
                  "id": 1,
                  "name": "pound",
                  "abbreviation": "lbs",
                  "category": {}
                },
                "salesPrice": "3.99",
                "category": {},
                "subCategory": {}
              }
            ],
            "description": "List of recipes under the category",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Recipe"
            }
          }
        },
        "required": [
          "id",
          "categoryName",
          "subCategories",
          "recipes"
        ]
      },
      "Recipe": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "recipeName": {
            "type": "string",
            "example": "Apple Mix",
            "description": "Name of the recipe"
          },
          "producedMenuItem": {
            "example": {
              "id": 1,
              "itemname": "Classic Apple",
              "category": {},
              "validSizes": [
                {
                  "id": 1,
                  "name": "medium"
                }
              ],
              "definedContainerItems": [
                {}
              ],
              "containerOptions": {}
            },
            "description": "The referenced MenuItem if this recipe produces one.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItem"
              }
            ]
          },
          "isIngredient": {
            "type": "boolean",
            "example": false,
            "description": "A flag for if a recipe is used as an ingredient in other recipes"
          },
          "ingredients": {
            "example": [
              {
                "id": 1,
                "parentRecipe": {},
                "ingredientInventoryItem": {
                  "id": 1,
                  "itemName": "flour",
                  "category": {},
                  "vendor": {},
                  "itemSizes": [
                    {}
                  ]
                },
                "ingredientRecipe": null,
                "quantity": 2,
                "quantityMeasure": {
                  "id": 1,
                  "name": "pound",
                  "abbreviation": "lbs",
                  "category": {}
                }
              }
            ],
            "description": "A list of ingredients for the recipe",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecipeIngredient"
            }
          },
          "batchResultQuantity": {
            "type": "number",
            "example": 3,
            "description": "The total unit amout of the batchResultUnitOfMeaure property produced by the recipe.",
            "format": "decimal",
            "nullable": true
          },
          "batchResultMeasurement": {
            "example": {
              "id": 1,
              "name": "pound",
              "abbreviation": "lbs",
              "category": {}
            },
            "description": "The unit of measure that descibes the total yield the recipe produces.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitOfMeasure"
              }
            ]
          },
          "servingSizeQuantity": {
            "type": "number",
            "example": 4,
            "description": "A unit amount of the servingSizeUnitOfMeasure property that is a subset of the batchResultQuantity property.",
            "format": "decimal",
            "nullable": true
          },
          "servingSizeMeasurement": {
            "example": {
              "id": 1,
              "name": "pound",
              "abbreviation": "lbs",
              "category": {}
            },
            "description": "The unit of measure that describes the total sellable portions of the recipes yield",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitOfMeasure"
              }
            ]
          },
          "salesPrice": {
            "type": "number",
            "example": "34.99",
            "description": "The set price per servingSizeQuantity.",
            "format": "decimal",
            "nullable": true
          },
          "category": {
            "example": {
              "id": 1,
              "categoryName": "Pie",
              "subCategories": [
                {}
              ],
              "recipes": [
                {}
              ]
            },
            "description": "The category of the recipe",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipeCategory"
              }
            ]
          },
          "subCategory": {
            "example": {
              "id": 1,
              "subCategoryName": "Savory Pie",
              "parentCategory": {},
              "recipes": [
                {}
              ]
            },
            "description": "The sub category of the recipe",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipeSubCategory"
              }
            ]
          }
        },
        "required": [
          "id",
          "recipeName",
          "isIngredient",
          "ingredients"
        ]
      },
      "RecipeIngredient": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The unique identifier of the entity"
          },
          "parentRecipe": {
            "example": {
              "id": 1,
              "recipeName": "Classic Apple Pie",
              "producedMenuItem": {
                "id": 1,
                "itemname": "Classic Apple",
                "category": {},
                "validSizes": [
                  {
                    "id": 1,
                    "name": "medium"
                  }
                ],
                "definedContainerItems": [
                  {}
                ],
                "containerOptions": {}
              },
              "isIngredient": false,
              "ingredients": [
                {}
              ],
              "batchResultQuantity": 2,
              "batchResultUnitOfMeasurement": {
                "id": 1,
                "name": "pound",
                "abbreviation": "lbs",
                "category": {}
              },
              "servingSizeQuantity": 3,
              "servingSizeUnitOfMeasurement": {
                "id": 1,
                "name": "pound",
                "abbreviation": "lbs",
                "category": {}
              },
              "salesPrice": "3.99",
              "category": {},
              "subCategory": {}
            },
            "description": "Recipe the ingredient is for",
            "allOf": [
              {
                "$ref": "#/components/schemas/Recipe"
              }
            ]
          },
          "ingredientInventoryItem": {
            "example": {
              "id": 1,
              "itemName": "flour",
              "category": {},
              "vendor": {},
              "itemSizes": [
                {}
              ]
            },
            "description": "The InventoryItem this ingredient uses, if this property is referenced, ingredientRecipe property must be null.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryItem"
              }
            ]
          },
          "ingredientRecipe": {
            "example": null,
            "description": "The Recipe this ingredient uses, if this property is referenced, ingredientInventoryItem must be null.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Recipe"
              }
            ]
          },
          "quantity": {
            "type": "number",
            "example": "3.5",
            "description": "the numberical value of the quantityMeasure property of the ingredient"
          },
          "quantityMeasure": {
            "example": {
              "id": 1,
              "name": "pound",
              "abbreviation": "lbs",
              "category": {
                "id": 1,
                "categoryName": "Weight",
                "unitsOfMeasure": [
                  {}
                ]
              }
            },
            "description": "The unit of measure for the ingredient",
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitOfMeasure"
              }
            ]
          }
        },
        "required": [
          "id",
          "parentRecipe",
          "quantity",
          "quantityMeasure"
        ]
      },
      "CreateChildRecipeIngredientDto": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "Declare whether creating or updating a child entity. Relevant when creating/updating a Recipe entity.",
            "example": "create"
          },
          "ingredientInventoryItemId": {
            "type": "number",
            "description": "Id of InventoryItem used as the ingredient, is optional. If inventoryItemId is null, subRecipeIngredientId must be populated, both cannot be populated.",
            "example": 10
          },
          "ingredientRecipeId": {
            "type": "number",
            "description": "Id of Recipe entity being used as a recipe ingredient, is optional. If subRecipeIngredientId is null, inventoryItemId must be populated, both cannot be populated.",
            "example": 1
          },
          "quantity": {
            "type": "number",
            "description": "The unit amount of the UnitofMeasure of the InventoryItem",
            "example": 2
          },
          "quantityMeasurementId": {
            "type": "number",
            "description": "Id of the UnitofMeasure entity.",
            "example": 3
          }
        },
        "required": [
          "mode",
          "quantity",
          "quantityMeasurementId"
        ]
      },
      "CreateRecipeDto": {
        "type": "object",
        "properties": {
          "recipeName": {
            "type": "string",
            "description": "Name of the Recipe entity.",
            "example": "Blueberry Pie"
          },
          "producedMenuItemId": {
            "type": "number",
            "description": "Id of the MenuItem that the recipe produces.",
            "example": 1
          },
          "isIngredient": {
            "type": "boolean",
            "description": "If the recipe is used as an ingredient.(Not sold directly)",
            "example": false
          },
          "batchResultQuantity": {
            "type": "number",
            "description": "The unit amount the recipe produces of the referenced BatchUnitOfMeasure UnitofMeasure entity.",
            "example": 2,
            "format": "decimal"
          },
          "batchResultMeasurementId": {
            "type": "number",
            "description": "Id of the UnitofMeasure entity expressing the unit size of what the recipe produces.",
            "example": 3
          },
          "servingSizeQuantity": {
            "type": "number",
            "description": "The unit amount of the servingSizeUnitOfMeasure describing the amount that is sold.",
            "example": 4,
            "format": "decimal"
          },
          "servingSizeMeasurementId": {
            "type": "number",
            "description": "Id of the UnitofMeasure used to represent the unit size of what is sold.",
            "example": 5
          },
          "salesPrice": {
            "type": "number",
            "description": "The price of purchasing the serving size amount.",
            "example": 6,
            "format": "decimal"
          },
          "categoryId": {
            "type": "number",
            "description": "Id of the RecipeCategory entity",
            "example": 7
          },
          "subCategoryId": {
            "type": "number",
            "description": "Id of the RecipeSubCategory entity. Must be a child subcategory to the referenced RecipeCategory",
            "example": 8
          },
          "ingredientDtos": {
            "description": "Array of CreateChildRecipeIngredientDtos. Child dtos are used when creating child RecipeIngredient entites through creating the Recipe entity.",
            "example": [
              {
                "mode": "create",
                "ingredientInventoryItemId": 1,
                "ingredientRecipeId": null,
                "quantity": 2,
                "quantityMeasurementId": 3
              },
              {
                "mode": "create",
                "ingredientInventoryItemId": null,
                "ingredientRecipeId": 4,
                "quantity": 5,
                "quantityMeasurementId": 6
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateChildRecipeIngredientDto"
            }
          }
        },
        "required": [
          "recipeName",
          "batchResultMeasurementId",
          "servingSizeMeasurementId"
        ]
      },
      "UpdateChildRecipeIngredientDto": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "Declare whether creating or updating a child entity. Relevant when creating/updating a Recipe entity.",
            "example": "update"
          },
          "id": {
            "type": "number",
            "description": "Id of the RecipeIngredient to update",
            "example": 1
          },
          "ingredientInventoryItemId": {
            "type": "object",
            "description": "Id of InventoryItem used as the ingredient, is optional. If inventoryItemId is null, subRecipeIngredientId must be populated, both cannot be populated.",
            "example": 2
          },
          "ingredientRecipeId": {
            "type": "object",
            "description": "Id of Recipe entity being used as a recipe ingredient, is optional. If subRecipeIngredientId is null, inventoryItemId must be populated, both cannot be populated.",
            "example": 3
          },
          "quantity": {
            "type": "number",
            "description": "The unit amount of the UnitofMeasure of the InventoryItem",
            "example": 4
          },
          "quantityMeasurementId": {
            "type": "number",
            "description": "Id of the UnitofMeasure entity.",
            "example": 5
          }
        },
        "required": [
          "mode",
          "id"
        ]
      },
      "UpdateRecipeDto": {
        "type": "object",
        "properties": {
          "recipeName": {
            "type": "string",
            "description": "Name of the Recipe entity.",
            "example": "Blueberry Pie"
          },
          "producedMenuItemId": {
            "type": "object",
            "description": "Id of the MenuItem that the recipe produces.",
            "example": "Blueberry Pie"
          },
          "isIngredient": {
            "type": "boolean",
            "description": "If the recipe is used as an ingredient.(Not sold directly)",
            "example": false
          },
          "batchResultQuantity": {
            "type": "object",
            "description": "The unit amount the recipe produces of the referenced BatchUnitOfMeasure UnitofMeasure entity.",
            "example": 1
          },
          "batchResultMeasurementId": {
            "type": "object",
            "description": "Id of the UnitofMeasure entity expressing the unit size of what the recipe produces.",
            "example": 2
          },
          "servingSizeQuantity": {
            "type": "object",
            "description": "The unit amount of the servingSizeUnitOfMeasure describing the amount that is sold.",
            "example": 3
          },
          "servingSizeMeasurementId": {
            "type": "object",
            "description": "Id of the UnitofMeasure used to represent the unit size of what is sold.",
            "example": 4
          },
          "salesPrice": {
            "type": "object",
            "description": "The price of purchasing the serving size amount.",
            "example": 5.99
          },
          "categoryId": {
            "type": "object",
            "description": "Id of the RecipeCategory entity",
            "example": 6
          },
          "subCategoryId": {
            "type": "object",
            "description": "Id of the RecipeSubCategory entity. Must be a child subcategory to the referenced RecipeCategory",
            "example": 7
          },
          "ingredientDtos": {
            "description": "Mixed array of CreateChildRecipeIngredientDtos and UpdateChildRecipeIngredientDtos. Child dtos are used when creating/updating child RecipeIngredient entites through updating the Recipe entity.",
            "example": [
              {
                "mode": "update",
                "id": 1,
                "ingredientInventoryItemId": 2,
                "ingredientRecipeId": null,
                "quantity": 3,
                "quantityMeasurementId": 4
              },
              {
                "mode": "create",
                "ingredientInventoryItemId": null,
                "ingredientRecipeId": 5,
                "quantity": 6,
                "quantityMeasurementId": 7
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateChildRecipeIngredientDto"
            }
          }
        }
      },
      "CreateChildRecipeSubCategoryDto": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "Declare whether creating or updating a child entity. Relevant when creating/updating a RecipeCategory entity.",
            "example": "create"
          },
          "subCategoryName": {
            "type": "string",
            "description": "Name of the RecipeSubCategory entity.",
            "example": "name"
          }
        },
        "required": [
          "mode",
          "subCategoryName"
        ]
      },
      "CreateRecipeCategoryDto": {
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string",
            "description": "Name of the RecipeCategory entity.",
            "example": "Pies"
          },
          "subCategoryDtos": {
            "description": "Array of CreateChildRecipeSubCategoryDtos, child dtos are used when creating the parent RecipeCategory with child RecipeSubCategory entities.",
            "example": [
              {
                "mode": "create",
                "subCategoryName": "savory pies"
              },
              {
                "mode": "create",
                "subCategoryName": "sweet pies"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateChildRecipeSubCategoryDto"
            }
          }
        },
        "required": [
          "categoryName"
        ]
      },
      "UpdateRecipeCategoryDto": {
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string",
            "description": "Name of the RecipeCategory entity.",
            "example": "Pies"
          },
          "subCategoryDtos": {
            "description": "Mixed array of CreateChildRecipeSubCategoryDtos and UpdateChildRecipeSubCategoryDtos, child dtos are used when updating the parent RecipeCategory with created/updated child RecipeSubCategory entities.",
            "example": [
              {
                "mode": "create",
                "subCategoryName": "savory pies"
              },
              {
                "mode": "update",
                "id": 1,
                "subCategoryName": "dessert pies"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateChildRecipeSubCategoryDto"
            }
          }
        }
      },
      "CreateRecipeSubCategoryDto": {
        "type": "object",
        "properties": {
          "subCategoryName": {
            "type": "string",
            "description": "Name of the RecipeSubCategory entity.",
            "example": "Sweet Pie"
          },
          "parentCategoryId": {
            "type": "number",
            "description": "Id of the RecipeCategory parent entity.",
            "example": 1
          }
        },
        "required": [
          "subCategoryName",
          "parentCategoryId"
        ]
      },
      "UpdateRecipeSubCategoryDto": {
        "type": "object",
        "properties": {
          "subCategoryName": {
            "type": "string",
            "description": "Name of the RecipeSubCategory entity.",
            "example": "name"
          }
        }
      },
      "CreateRecipeIngredientDto": {
        "type": "object",
        "properties": {
          "parentRecipeId": {
            "type": "number",
            "description": "Id of the Recipe entity that is the parent",
            "example": 1
          },
          "ingredientInventoryItemId": {
            "type": "number",
            "description": "Id of InventoryItem used as the ingredient, is optional. If inventoryItemId is null, subRecipeIngredientId must be populated, both cannot be populated.",
            "example": 2
          },
          "ingredientRecipeId": {
            "type": "number",
            "description": "Id of Recipe entity being used as a recipe ingredient, is optional. If subRecipeIngredientId is null, inventoryItemId must be populated, both cannot be populated.",
            "example": 3
          },
          "quantity": {
            "type": "number",
            "description": "The unit amount of the UnitofMeasure of the InventoryItem",
            "example": 4
          },
          "quantityMeasurementId": {
            "type": "number",
            "description": "Id of the UnitofMeasure entity.",
            "example": 5
          }
        },
        "required": [
          "parentRecipeId",
          "quantity",
          "quantityMeasurementId"
        ]
      },
      "UpdateRecipeIngredientDto": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "The unit amount of the UnitofMeasure of the InventoryItem",
            "example": 1
          },
          "quantityMeasurementId": {
            "type": "number",
            "description": "Id of the UnitofMeasure entity.",
            "example": 2
          },
          "ingredientInventoryItemId": {
            "type": "object",
            "description": "Id of InventoryItem used as the ingredient, is optional. If inventoryItemId is null, subRecipeIngredientId must be populated, both cannot be populated.",
            "example": 3
          },
          "ingredientRecipeId": {
            "type": "object",
            "description": "Id of Recipe entity being used as a recipe ingredient, is optional. If subRecipeIngredientId is null, inventoryItemId must be populated, both cannot be populated.",
            "example": 4
          }
        }
      }
    }
  }
}